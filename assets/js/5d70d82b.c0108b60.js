"use strict";(self.webpackChunkraccoon=self.webpackChunkraccoon||[]).push([[133],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>d});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},y="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),y=p(n),g=r,d=y["".concat(s,".").concat(g)]||y[g]||u[g]||i;return n?a.createElement(d,l(l({ref:t},c),{},{components:n})):a.createElement(d,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[y]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6378:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(8168),r=(n(6540),n(5680));const i={},l="Javascript",o={unversionedId:"clients/javascript",id:"clients/javascript",title:"Javascript",description:"Requirements",source:"@site/docs/clients/javascript.md",sourceDirName:"clients",slug:"/clients/javascript",permalink:"/raccoon/clients/javascript",draft:!1,editUrl:"https://github.com/raystack/raccoon/edit/master/docs/docs/clients/javascript.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Python",permalink:"/raccoon/clients/python"},next:{title:"Java",permalink:"/raccoon/clients/java"}},s={},p=[{value:"Requirements",id:"requirements",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Quickstart",id:"quickstart",level:3},{value:"Guide",id:"guide",level:3},{value:"Creating a client",id:"creating-a-client",level:4},{value:"Publishing events",id:"publishing-events",level:4},{value:"Examples",id:"examples",level:2}],c={toc:p},y="wrapper";function u(e){let{components:t,...n}=e;return(0,r.yg)(y,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"javascript"},"Javascript"),(0,r.yg)("h2",{id:"requirements"},"Requirements"),(0,r.yg)("p",null,"Make sure that Nodejs >= ",(0,r.yg)("inlineCode",{parentName:"p"},"20.0")," is installed on your system. See ",(0,r.yg)("a",{parentName:"p",href:"https://nodejs.org/en/download/package-manager"},"installation instructions")," on Nodejs's website for more info."),(0,r.yg)("h2",{id:"installation"},"Installation"),(0,r.yg)("p",null,"Install Raccoon's Javascript client using npm"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"$ npm install --save @raystack/raccoon\n")),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)("h3",{id:"quickstart"},"Quickstart"),(0,r.yg)("p",null,"Below is a self contained example of Raccoon's Javascript client that uses Raccoon's REST API to publish events."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript",metastring:'title="quickstart.js" showLineNumbers',title:'"quickstart.js"',showLineNumbers:!0},"import { RaccoonClient, SerializationType, WireType } from '@raystack/raccoon';\n\nconst jsonEvents = [\n    {\n        type: 'test-topic1',\n        data: { key1: 'value1', key2: ['a', 'b'] }\n    },\n    {\n        type: 'test-topic2',\n        data: { key1: 'value2', key2: { key3: 'value3', key4: 'value4' } }\n    }\n];\n\nconst raccoonClient = new RaccoonClient({\n    serializationType: SerializationType.JSON,\n    wireType: WireType.JSON,\n    timeout: 5000,\n    url: 'http://localhost:8080/api/v1/events',\n    headers: {\n        'X-User-ID': 'user-1'\n    }\n});\n\nraccoonClient\n    .send(jsonEvents)\n    .then((result) => {\n        console.log('Result:', result);\n    })\n    .catch((error) => {\n        console.error('Error:', error);\n    });\n")),(0,r.yg)("h3",{id:"guide"},"Guide"),(0,r.yg)("h4",{id:"creating-a-client"},"Creating a client"),(0,r.yg)("p",null,"Raccoon's Javascript client only supports sending event's over Raccoon's HTTP/JSON (REST) API."),(0,r.yg)("p",null,"To create the client, use ",(0,r.yg)("inlineCode",{parentName:"p"},"new RaccoonClient(options)"),". ",(0,r.yg)("inlineCode",{parentName:"p"},"options")," is javascript object that contains the following properites:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Property"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"url"),(0,r.yg)("td",{parentName:"tr",align:null},"(required) The base URL for the API requests")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"serializationType"),(0,r.yg)("td",{parentName:"tr",align:null},"(required) The serialization type to use, either 'protobuf' or 'json'")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"wireType"),(0,r.yg)("td",{parentName:"tr",align:null},"The wire configuration, containing ContentType (default: ",(0,r.yg)("inlineCode",{parentName:"td"},"wireType.JSON"),")")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"headers"),(0,r.yg)("td",{parentName:"tr",align:null},"Custom headers to be included in the HTTP requests (default: ",(0,r.yg)("inlineCode",{parentName:"td"},"{}"),")")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"retryMax"),(0,r.yg)("td",{parentName:"tr",align:null},"The maximum number of retry attempts for failed requests (default: ",(0,r.yg)("inlineCode",{parentName:"td"},"3"),")")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"retryWait"),(0,r.yg)("td",{parentName:"tr",align:null},"The time in milliseconds to wait between retry attempts (default: ",(0,r.yg)("inlineCode",{parentName:"td"},"1000"),")")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"timeout"),(0,r.yg)("td",{parentName:"tr",align:null},"The timeout in milliseconds (default: ",(0,r.yg)("inlineCode",{parentName:"td"},"1000"),")")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"logger"),(0,r.yg)("td",{parentName:"tr",align:null},"Logger object for logging (default: ",(0,r.yg)("inlineCode",{parentName:"td"},"global.console"),")")))),(0,r.yg)("h4",{id:"publishing-events"},"Publishing events"),(0,r.yg)("p",null,"To publish events, create an array of objects and pass it to ",(0,r.yg)("inlineCode",{parentName:"p"},"RaccoonClient#send()"),". The return value is a ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"Promise"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'const events = [\n    {\n        type: "event_type",\n        data: {},\n    }\n];\n\nclient.send(events)\n    .then(result => console.log(result))\n    .catch(err => console.error(err))\n')),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"type")," denotes the event type. This is used by raccoon to route the event to a specific topic downstream. ",(0,r.yg)("inlineCode",{parentName:"p"},"data")," field contains the payload. This data is serialised by the ",(0,r.yg)("inlineCode",{parentName:"p"},"serializerType")," that's configured on the client. "),(0,r.yg)("p",null,"The following table lists which serializer to use for a given payload type."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Message Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Serializer"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"JSON"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"SerializationType.JSON"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Protobuf"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"SerializationType.PROTOBUF"))))),(0,r.yg)("p",null,"Once a client is constructed with a specific kind of serializer, you may only pass it events of that specific type. In particular, for ",(0,r.yg)("inlineCode",{parentName:"p"},"JSON")," serialiser the event data must be a javascript object. While for ",(0,r.yg)("inlineCode",{parentName:"p"},"PROTOBUF")," serialiser the event data must be a protobuf message."),(0,r.yg)("h2",{id:"examples"},"Examples"),(0,r.yg)("p",null,"You can find examples of client usage ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/raystack/raccoon/tree/main/clients/js/examples"},"here")))}u.isMDXComponent=!0}}]);