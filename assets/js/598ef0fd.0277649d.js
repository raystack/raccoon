"use strict";(self.webpackChunkraccoon=self.webpackChunkraccoon||[]).push([[320],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>y});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(t),g=r,y=d["".concat(c,".").concat(g)]||d[g]||u[g]||i;return t?a.createElement(y,o(o({ref:n},p),{},{components:t})):a.createElement(y,o({ref:n},p))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=g;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},8761:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=t(8168),r=(t(6540),t(5680));const i={},o="Java",l={unversionedId:"clients/java",id:"clients/java",title:"Java",description:"Requirements",source:"@site/docs/clients/java.md",sourceDirName:"clients",slug:"/clients/java",permalink:"/raccoon/clients/java",draft:!1,editUrl:"https://github.com/raystack/raccoon/edit/master/docs/docs/clients/java.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Javascript",permalink:"/raccoon/clients/javascript"},next:{title:"Architecture",permalink:"/raccoon/concepts/architecture"}},c={},s=[{value:"Requirements",id:"requirements",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Quickstart",id:"quickstart",level:3},{value:"Guide",id:"guide",level:3},{value:"Creating a client",id:"creating-a-client",level:4},{value:"Sending events",id:"sending-events",level:4}],p={toc:s},d="wrapper";function u(e){let{components:n,...t}=e;return(0,r.yg)(d,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"java"},"Java"),(0,r.yg)("h2",{id:"requirements"},"Requirements"),(0,r.yg)("p",null,"Make sure you have Java JDK ",(0,r.yg)("inlineCode",{parentName:"p"},">=8")," and Gradle ",(0,r.yg)("inlineCode",{parentName:"p"},">=7")," installed on your system. See installation instructions for ",(0,r.yg)("a",{parentName:"p",href:"https://openjdk.org/install/"},"openjdk")," and ",(0,r.yg)("a",{parentName:"p",href:"https://gradle.org/install/"},"gradle")," for more information."),(0,r.yg)("h2",{id:"installation"},"Installation"),(0,r.yg)("p",null,"In your ",(0,r.yg)("inlineCode",{parentName:"p"},"build.gradle")," file add ",(0,r.yg)("inlineCode",{parentName:"p"},"io.odpf.raccoon")," as a dependency."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-groovy"},"dependencies {\n    implementation group: 'io.odpf', name: 'raccoon', version: '0.1.5-rc'\n}\n")),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)("h3",{id:"quickstart"},"Quickstart"),(0,r.yg)("p",null,"Below is a self contained example of Raccoon's Java client that uses the REST API to publish events"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java",metastring:'title="App.java" showLineNumbers',title:'"App.java"',showLineNumbers:!0},'package org.example;\n\nimport io.odpf.raccoon.client.RestConfig;\nimport io.odpf.raccoon.client.RaccoonClient;\nimport io.odpf.raccoon.client.RaccoonClientFactory;\nimport io.odpf.raccoon.model.Event;\nimport io.odpf.raccoon.model.Response;\nimport io.odpf.raccoon.model.ResponseStatus;\nimport io.odpf.raccoon.serializer.JsonSerializer;\nimport io.odpf.raccoon.wire.ProtoWire;\n\npublic class App {\n\n    public static void main(String[] args) {\n        RestConfig config = RestConfig.builder()\n                  .url("http://localhost:8080/api/v1/events")\n                  .header("x-user-id", "123")\n                  .serializer(new JsonSerializer()) // default is Json\n                  .marshaler(new ProtoWire()) // default is Json\n                  .retryMax(5) // default is 3\n                  .retryWait(2000) // default is one second\n                  .build();\n\n        // get the rest client instance.\n        RaccoonClient Client = RaccoonClientFactory.getRestClient(config);\n\n        Response res = Client.send(new Event[]{\n                new Event("page", "EVENT".getBytes())\n        });\n\n        if (res.isSuccess() && res.getStatus() == ResponseStatus.STATUS_SUCCESS) {\n                System.out.println("The event was sent successfully");\n        }\n    }\n}\n\n')),(0,r.yg)("h3",{id:"guide"},"Guide"),(0,r.yg)("h4",{id:"creating-a-client"},"Creating a client"),(0,r.yg)("p",null,"Raccoon's Java client only supports sending events over Raccoon's HTTP/JSON (REST) API."),(0,r.yg)("p",null,"To create a client, you must pass the ",(0,r.yg)("inlineCode",{parentName:"p"},"io.odpf.raccoon.client.RestConfig")," object to the client factory ",(0,r.yg)("inlineCode",{parentName:"p"},"io.odpf.raccoon.client.RaccoonClientFactory.getRestClient()"),"."),(0,r.yg)("p",null,"You can use ",(0,r.yg)("inlineCode",{parentName:"p"},"RestConfig.builder()")," as a convenient way of building the config object."),(0,r.yg)("p",null,"Here's a minimal example of what it looks like:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'RestConfig config = RestConfig.builder()\n        .url("http://localhost:8080/api/v1/events")\n        .build();\nRacconClient client = RaccoonClientFactory.getRestClient(config);\n')),(0,r.yg)("h4",{id:"sending-events"},"Sending events"),(0,r.yg)("p",null,"Events can be sent to raccoon use ",(0,r.yg)("inlineCode",{parentName:"p"},"RestClient.send()")," method. The ",(0,r.yg)("inlineCode",{parentName:"p"},"send()")," methods accepts an array of ",(0,r.yg)("inlineCode",{parentName:"p"},"io.odpf.raccoon.model.Event")),(0,r.yg)("p",null,"Here's a minimal example of what this could look like:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'Event[] events = new Event[]{\n    new Event("event_type", obj)\n};\nclient.send(events);\n')),(0,r.yg)("p",null,"Each event has a ",(0,r.yg)("inlineCode",{parentName:"p"},"type")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"data")," field. ",(0,r.yg)("inlineCode",{parentName:"p"},"type")," denotes the event type. This is used by raccoon to route the event to a specific topic downstream. ",(0,r.yg)("inlineCode",{parentName:"p"},"data")," field contains the payload. This data is serialised by the ",(0,r.yg)("inlineCode",{parentName:"p"},"serializer")," that's configured on the client. "),(0,r.yg)("p",null,"The following table lists which serializer to use for a given payload type."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Message Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Serializer"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"JSON"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"io.odpf.raccoon.serializer.JsonSerializer"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Protobuf"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"io.odpf.raccoon.serializer.ProtoSerializer"))))),(0,r.yg)("p",null,"Once a client is constructed with a specific kind of serializer, you may only pass it events of that specific type. In particular, for ",(0,r.yg)("inlineCode",{parentName:"p"},"JSON")," serialiser the event data must be a Java object. While for ",(0,r.yg)("inlineCode",{parentName:"p"},"PROTOBUF")," serialiser the event data must be a protobuf message object"))}u.isMDXComponent=!0}}]);