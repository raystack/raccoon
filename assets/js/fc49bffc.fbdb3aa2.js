"use strict";(self.webpackChunkfirehose=self.webpackChunkfirehose||[]).push([[643],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var l=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},i=Object.keys(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=l.createContext({}),u=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return l.createElement(s.Provider,{value:t},e.children)},_={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(n),p=a,k=d["".concat(s,".").concat(p)]||d[p]||_[p]||i;return n?l.createElement(k,r(r({ref:t},c),{},{components:n})):l.createElement(k,r({ref:t},c))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var u=2;u<i;u++)r[u]=n[u];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2723:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return _}});var l=n(7462),a=n(3366),i=(n(7294),n(3905)),r=["components"],o={},s="Metrics",u={unversionedId:"reference/metrics",id:"reference/metrics",title:"Metrics",description:"Raccoon uses Statsd protocol as way to report metrics. You can capture the metrics using any supported statsd collector like Telegraf. This page contains reference for all the metrics for Raccoon.",source:"@site/docs/reference/metrics.md",sourceDirName:"reference",slug:"/reference/metrics",permalink:"/raccoon/reference/metrics",draft:!1,editUrl:"https://github.com/raystack/raccoon/edit/master/docs/docs/reference/metrics.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Configurations",permalink:"/raccoon/reference/configurations"},next:{title:"Contribution Process",permalink:"/raccoon/contribute/contribution"}},c={},_=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Server Connection",id:"server-connection",level:2},{value:"<code>server_ping_failure_total</code>",id:"server_ping_failure_total",level:3},{value:"<code>server_pong_failure_total</code>",id:"server_pong_failure_total",level:3},{value:"<code>connections_count_current</code>",id:"connections_count_current",level:3},{value:"<code>user_connection_success_total</code>",id:"user_connection_success_total",level:3},{value:"<code>user_connection_failure_total</code>",id:"user_connection_failure_total",level:3},{value:"<code>user_session_duration_milliseconds</code>",id:"user_session_duration_milliseconds",level:3},{value:"<code>conn_close_err_count</code>",id:"conn_close_err_count",level:3},{value:"Kafka Publisher",id:"kafka-publisher",level:2},{value:"<code>kafka_messages_delivered_total</code>",id:"kafka_messages_delivered_total",level:3},{value:"<code>kafka_messages_undelivered_total</code>",id:"kafka_messages_undelivered_total",level:3},{value:"<code>kafka_unknown_topic_failure_total</code>",id:"kafka_unknown_topic_failure_total",level:3},{value:"<code>kafka_tx_messages_total</code>",id:"kafka_tx_messages_total",level:3},{value:"<code>kafka_tx_messages_bytes_total</code>",id:"kafka_tx_messages_bytes_total",level:3},{value:"<code>kafka_brokers_tx_total</code>",id:"kafka_brokers_tx_total",level:3},{value:"<code>kafka_brokers_tx_bytes_total</code>",id:"kafka_brokers_tx_bytes_total",level:3},{value:"<code>kafka_brokers_rtt_average_milliseconds</code>",id:"kafka_brokers_rtt_average_milliseconds",level:3},{value:"<code>ack_event_rtt_ms</code>",id:"ack_event_rtt_ms",level:3},{value:"<code>event_rtt_ms</code>",id:"event_rtt_ms",level:3},{value:"<code>kafka_producebulk_tt_ms</code>",id:"kafka_producebulk_tt_ms",level:3},{value:"PubSub Publisher",id:"pubsub-publisher",level:2},{value:"<code>pubsub_messages_delivered_total</code>",id:"pubsub_messages_delivered_total",level:3},{value:"<code>pubsub_messages_undelivered_total</code>",id:"pubsub_messages_undelivered_total",level:3},{value:"<code>pubsub_unknown_topic_failure_total</code>",id:"pubsub_unknown_topic_failure_total",level:3},{value:"Kinesis Publisher",id:"kinesis-publisher",level:2},{value:"<code>kinesis_messages_delivered_total</code>",id:"kinesis_messages_delivered_total",level:3},{value:"<code>kinesis_messages_undelivered_total</code>",id:"kinesis_messages_undelivered_total",level:3},{value:"<code>kinesis_unknown_stream_failure_total</code>",id:"kinesis_unknown_stream_failure_total",level:3},{value:"Resource Usage",id:"resource-usage",level:2},{value:"<code>server_mem_gc_triggered_current</code>",id:"server_mem_gc_triggered_current",level:3},{value:"<code>server_mem_gc_pauseNs_current</code>",id:"server_mem_gc_pausens_current",level:3},{value:"<code>server_mem_gc_count_current</code>",id:"server_mem_gc_count_current",level:3},{value:"<code>server_mem_gc_pauseTotalNs_current</code>",id:"server_mem_gc_pausetotalns_current",level:3},{value:"<code>server_mem_heap_alloc_bytes_current</code>",id:"server_mem_heap_alloc_bytes_current",level:3},{value:"<code>server_mem_heap_inuse_bytes_current</code>",id:"server_mem_heap_inuse_bytes_current",level:3},{value:"<code>server_mem_heap_objects_total_current</code>",id:"server_mem_heap_objects_total_current",level:3},{value:"<code>server_go_routines_count_current</code>",id:"server_go_routines_count_current",level:3},{value:"<code>server_mem_stack_inuse_bytes_current</code>",id:"server_mem_stack_inuse_bytes_current",level:3},{value:"Event Delivery",id:"event-delivery",level:2},{value:"<code>events_rx_bytes_total</code>",id:"events_rx_bytes_total",level:3},{value:"<code>events_rx_total</code>",id:"events_rx_total",level:3},{value:"<code>events_duplicate_total</code>",id:"events_duplicate_total",level:3},{value:"<code>batches_read_total</code>",id:"batches_read_total",level:3},{value:"<code>batch_idle_in_channel_milliseconds</code>",id:"batch_idle_in_channel_milliseconds",level:3},{value:"<code>event_processing_duration_milliseconds</code>",id:"event_processing_duration_milliseconds",level:3},{value:"<code>server_processing_latency_milliseconds</code>",id:"server_processing_latency_milliseconds",level:3},{value:"<code>worker_processing_duration_milliseconds</code>",id:"worker_processing_duration_milliseconds",level:3}],d={toc:_};function p(e){var t=e.components,o=(0,a.Z)(e,r);return(0,i.kt)("wrapper",(0,l.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"metrics"},"Metrics"),(0,i.kt)("p",null,"Raccoon uses Statsd protocol as way to report metrics. You can capture the metrics using any supported statsd collector like ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/influxdata/telegraf"},"Telegraf"),". This page contains reference for all the metrics for Raccoon."),(0,i.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/raccoon/reference/metrics#server-connection"},"Server Connection")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/raccoon/reference/metrics#kafka-publisher"},"Kafka Publisher")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/raccoon/reference/metrics#pubsub-publisher"},"PubSub Publisher")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/raccoon/reference/metrics#kinesis-publisher"},"Kinesis Publisher")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/raccoon/reference/metrics#resource-usage"},"Resource Usage")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/raccoon/reference/metrics#event-delivery"},"Event Delivery"))),(0,i.kt)("h2",{id:"server-connection"},"Server Connection"),(0,i.kt)("h3",{id:"server_ping_failure_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"server_ping_failure_total")),(0,i.kt)("p",null,"Total ping that server fails to send"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Counting")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,i.kt)("h3",{id:"server_pong_failure_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"server_pong_failure_total")),(0,i.kt)("p",null,"Total pong that server fails to send"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Counting")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,i.kt)("h3",{id:"connections_count_current"},(0,i.kt)("inlineCode",{parentName:"h3"},"connections_count_current")),(0,i.kt)("p",null,"Number of alive connections"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Gauge")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,i.kt)("h3",{id:"user_connection_success_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"user_connection_success_total")),(0,i.kt)("p",null,"Number of successful connections established to the server"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Count")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,i.kt)("h3",{id:"user_connection_failure_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"user_connection_failure_total")),(0,i.kt)("p",null,"Number of fail connections established to the server"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Count")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"reason=ugfailure")," ",(0,i.kt)("inlineCode",{parentName:"li"},"reason=exists")," ",(0,i.kt)("inlineCode",{parentName:"li"},"reason=serverlimit")," ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,i.kt)("h3",{id:"user_session_duration_milliseconds"},(0,i.kt)("inlineCode",{parentName:"h3"},"user_session_duration_milliseconds")),(0,i.kt)("p",null,"Duration of alive connection per session per connection"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Timing")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,i.kt)("h3",{id:"conn_close_err_count"},(0,i.kt)("inlineCode",{parentName:"h3"},"conn_close_err_count")),(0,i.kt)("p",null,"Number of connection close errors encountered"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Count")),(0,i.kt)("li",{parentName:"ul"},"Tags: NA")),(0,i.kt)("h2",{id:"kafka-publisher"},"Kafka Publisher"),(0,i.kt)("h3",{id:"kafka_messages_delivered_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"kafka_messages_delivered_total")),(0,i.kt)("p",null,"Number of delivered events to Kafka. The metric also contains false increments. To find the true value, one should use the difference between this and ",(0,i.kt)("inlineCode",{parentName:"p"},"kafka_messages_undelivered_total")," metric for the same tag/labels."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Count")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"success=false")," ",(0,i.kt)("inlineCode",{parentName:"li"},"success=true")," ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*")," ",(0,i.kt)("inlineCode",{parentName:"li"},"event_type=*"))),(0,i.kt)("h3",{id:"kafka_messages_undelivered_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"kafka_messages_undelivered_total")),(0,i.kt)("p",null,"The count of false increments done by ",(0,i.kt)("inlineCode",{parentName:"p"},"kafka_messages_delivered_total"),". To be used in conjunction with the former for accurate metrics."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Count")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"success=false")," ",(0,i.kt)("inlineCode",{parentName:"li"},"success=true")," ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*")," ",(0,i.kt)("inlineCode",{parentName:"li"},"event_type=*"))),(0,i.kt)("h3",{id:"kafka_unknown_topic_failure_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"kafka_unknown_topic_failure_total")),(0,i.kt)("p",null,"Number of delivery failure caused by topic does not exist in kafka."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Count")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"topic=topicname")," ",(0,i.kt)("inlineCode",{parentName:"li"},"event_type=*"))),(0,i.kt)("h3",{id:"kafka_tx_messages_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"kafka_tx_messages_total")),(0,i.kt)("p",null,"Total number of messages transmitted ","(","produced",")"," to Kafka brokers."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Gauge"))),(0,i.kt)("h3",{id:"kafka_tx_messages_bytes_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"kafka_tx_messages_bytes_total")),(0,i.kt)("p",null,"Total number of message bytes ","(","including framing, such as per-Message framing and MessageSet/batch framing",")"," transmitted to Kafka brokers"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Gauge"))),(0,i.kt)("h3",{id:"kafka_brokers_tx_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"kafka_brokers_tx_total")),(0,i.kt)("p",null,"Total number of requests sent to Kafka brokers"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Gauge")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"broker=broker_nodes"))),(0,i.kt)("h3",{id:"kafka_brokers_tx_bytes_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"kafka_brokers_tx_bytes_total")),(0,i.kt)("p",null,"Total number of bytes transmitted to Kafka brokers"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Gauge")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"broker=broker_nodes"))),(0,i.kt)("h3",{id:"kafka_brokers_rtt_average_milliseconds"},(0,i.kt)("inlineCode",{parentName:"h3"},"kafka_brokers_rtt_average_milliseconds")),(0,i.kt)("p",null,"Broker latency / round-trip time in microseconds"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Gauge")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"broker=broker_nodes"))),(0,i.kt)("h3",{id:"ack_event_rtt_ms"},(0,i.kt)("inlineCode",{parentName:"h3"},"ack_event_rtt_ms")),(0,i.kt)("p",null,"Time taken from ack function called by kafka producer to processed by the ack handler."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Timing")),(0,i.kt)("li",{parentName:"ul"},"Tags: NA")),(0,i.kt)("h3",{id:"event_rtt_ms"},(0,i.kt)("inlineCode",{parentName:"h3"},"event_rtt_ms")),(0,i.kt)("p",null,"Time taken from event is consumed from the queue to be acked by the ack handler."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Timing")),(0,i.kt)("li",{parentName:"ul"},"Tags: NA")),(0,i.kt)("h3",{id:"kafka_producebulk_tt_ms"},(0,i.kt)("inlineCode",{parentName:"h3"},"kafka_producebulk_tt_ms")),(0,i.kt)("p",null,"Response time of produce batch method of the kafka producer"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type ",(0,i.kt)("inlineCode",{parentName:"li"},"Timing")),(0,i.kt)("li",{parentName:"ul"},"Tags: NA")),(0,i.kt)("h2",{id:"pubsub-publisher"},"PubSub Publisher"),(0,i.kt)("h3",{id:"pubsub_messages_delivered_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"pubsub_messages_delivered_total")),(0,i.kt)("p",null,"Number of delivered events to PubSub. The metric also contains false increments. To find the true value, one should use the difference between this and ",(0,i.kt)("inlineCode",{parentName:"p"},"pubsub_messages_undelivered_total")," metric for the same tag/labels."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Count")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"success=false")," ",(0,i.kt)("inlineCode",{parentName:"li"},"success=true")," ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*")," ",(0,i.kt)("inlineCode",{parentName:"li"},"event_type=*"))),(0,i.kt)("h3",{id:"pubsub_messages_undelivered_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"pubsub_messages_undelivered_total")),(0,i.kt)("p",null,"The count of false increments done by ",(0,i.kt)("inlineCode",{parentName:"p"},"pubsub_messages_delivered_total"),". To be used in conjunction with the former for accurate metrics."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Count")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"success=false")," ",(0,i.kt)("inlineCode",{parentName:"li"},"success=true")," ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*")," ",(0,i.kt)("inlineCode",{parentName:"li"},"event_type=*"))),(0,i.kt)("h3",{id:"pubsub_unknown_topic_failure_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"pubsub_unknown_topic_failure_total")),(0,i.kt)("p",null,"Number of delivery failure caused by topic does not exist in PubSub."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Count")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"topic=topicname")," ",(0,i.kt)("inlineCode",{parentName:"li"},"event_type=*")," ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,i.kt)("h2",{id:"kinesis-publisher"},"Kinesis Publisher"),(0,i.kt)("h3",{id:"kinesis_messages_delivered_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"kinesis_messages_delivered_total")),(0,i.kt)("p",null,"Number of delivered events to Kinesis. The metric also contains false increments. To find the true value, one should use the difference between this and ",(0,i.kt)("inlineCode",{parentName:"p"},"kinesis_messages_undelivered_total")," metric for the same tag/labels."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Count")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"success=false")," ",(0,i.kt)("inlineCode",{parentName:"li"},"success=true")," ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*")," ",(0,i.kt)("inlineCode",{parentName:"li"},"event_type=*"))),(0,i.kt)("h3",{id:"kinesis_messages_undelivered_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"kinesis_messages_undelivered_total")),(0,i.kt)("p",null,"The count of false increments done by ",(0,i.kt)("inlineCode",{parentName:"p"},"kinesis_messages_delivered_total"),". To be used in conjunction with the former for accurate metrics."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Count")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"success=false")," ",(0,i.kt)("inlineCode",{parentName:"li"},"success=true")," ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*")," ",(0,i.kt)("inlineCode",{parentName:"li"},"event_type=*"))),(0,i.kt)("h3",{id:"kinesis_unknown_stream_failure_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"kinesis_unknown_stream_failure_total")),(0,i.kt)("p",null,"Number of delivery failure caused by stream does not exist in Kinesis."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Count")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"stream=streamname")," ",(0,i.kt)("inlineCode",{parentName:"li"},"event_type=*")," ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,i.kt)("h2",{id:"resource-usage"},"Resource Usage"),(0,i.kt)("h3",{id:"server_mem_gc_triggered_current"},(0,i.kt)("inlineCode",{parentName:"h3"},"server_mem_gc_triggered_current")),(0,i.kt)("p",null,"The time the last garbage collection finished in Unix timestamp"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Gauge"))),(0,i.kt)("h3",{id:"server_mem_gc_pausens_current"},(0,i.kt)("inlineCode",{parentName:"h3"},"server_mem_gc_pauseNs_current")),(0,i.kt)("p",null,"Circular buffer of recent GC stop-the-world in Unix timestamp"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Gauge"))),(0,i.kt)("h3",{id:"server_mem_gc_count_current"},(0,i.kt)("inlineCode",{parentName:"h3"},"server_mem_gc_count_current")),(0,i.kt)("p",null,"The number of completed GC cycle"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Gauge"))),(0,i.kt)("h3",{id:"server_mem_gc_pausetotalns_current"},(0,i.kt)("inlineCode",{parentName:"h3"},"server_mem_gc_pauseTotalNs_current")),(0,i.kt)("p",null,"The cumulative nanoseconds in GC stop-the-world pauses since the program started"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Gauge"))),(0,i.kt)("h3",{id:"server_mem_heap_alloc_bytes_current"},(0,i.kt)("inlineCode",{parentName:"h3"},"server_mem_heap_alloc_bytes_current")),(0,i.kt)("p",null,"Bytes of allocated heap objects"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Gauge"))),(0,i.kt)("h3",{id:"server_mem_heap_inuse_bytes_current"},(0,i.kt)("inlineCode",{parentName:"h3"},"server_mem_heap_inuse_bytes_current")),(0,i.kt)("p",null,"HeapInuse is bytes in in-use spans"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Gauge"))),(0,i.kt)("h3",{id:"server_mem_heap_objects_total_current"},(0,i.kt)("inlineCode",{parentName:"h3"},"server_mem_heap_objects_total_current")),(0,i.kt)("p",null,"Number of allocated heap objects"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Gauge"))),(0,i.kt)("h3",{id:"server_go_routines_count_current"},(0,i.kt)("inlineCode",{parentName:"h3"},"server_go_routines_count_current")),(0,i.kt)("p",null,"Number of goroutine spawn in a single flush"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Gauge"))),(0,i.kt)("h3",{id:"server_mem_stack_inuse_bytes_current"},(0,i.kt)("inlineCode",{parentName:"h3"},"server_mem_stack_inuse_bytes_current")),(0,i.kt)("p",null,"Bytes in stack spans"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Gauge"))),(0,i.kt)("h2",{id:"event-delivery"},"Event Delivery"),(0,i.kt)("p",null,"Following metrics are event delivery reports. Each metrics reported at a different point in time. See the diagram below for to understand when each metrics are reported."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Diagram",src:n(5879).Z,width:"585",height:"381"})),(0,i.kt)("h3",{id:"events_rx_bytes_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"events_rx_bytes_total")),(0,i.kt)("p",null,"Total byte receieved in requests"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Count")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*")," ",(0,i.kt)("inlineCode",{parentName:"li"},"event_type=*"))),(0,i.kt)("h3",{id:"events_rx_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"events_rx_total")),(0,i.kt)("p",null,"Number of events received in requests"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Count")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*")," ",(0,i.kt)("inlineCode",{parentName:"li"},"event_type=*"))),(0,i.kt)("h3",{id:"events_duplicate_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"events_duplicate_total")),(0,i.kt)("p",null,"Number of duplicate events"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Count")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*")," ",(0,i.kt)("inlineCode",{parentName:"li"},"reason=*"))),(0,i.kt)("h3",{id:"batches_read_total"},(0,i.kt)("inlineCode",{parentName:"h3"},"batches_read_total")),(0,i.kt)("p",null,"Request count"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Count")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"status=failed")," ",(0,i.kt)("inlineCode",{parentName:"li"},"status=success")," ",(0,i.kt)("inlineCode",{parentName:"li"},"reason=*")," ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,i.kt)("h3",{id:"batch_idle_in_channel_milliseconds"},(0,i.kt)("inlineCode",{parentName:"h3"},"batch_idle_in_channel_milliseconds")),(0,i.kt)("p",null,"Duration from when the request is received to when the request is processed. High value of this metric indicates the publisher is slow."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Timing")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"worker=worker-name"))),(0,i.kt)("h3",{id:"event_processing_duration_milliseconds"},(0,i.kt)("inlineCode",{parentName:"h3"},"event_processing_duration_milliseconds")),(0,i.kt)("p",null,"Duration from the time request is sent to the time events are published. This metric is calculated per event by following formula ",(0,i.kt)("inlineCode",{parentName:"p"},"(PublishedTime - SentTime)/CountEvents")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Timing")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,i.kt)("h3",{id:"server_processing_latency_milliseconds"},(0,i.kt)("inlineCode",{parentName:"h3"},"server_processing_latency_milliseconds")),(0,i.kt)("p",null,"Duration from the time request is receieved to the time events are published. This metric is calculated per event by following formula",(0,i.kt)("inlineCode",{parentName:"p"},"(PublishedTime - ReceievedTime)/CountEvents")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Timing")),(0,i.kt)("li",{parentName:"ul"},"Tags: ",(0,i.kt)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,i.kt)("h3",{id:"worker_processing_duration_milliseconds"},(0,i.kt)("inlineCode",{parentName:"h3"},"worker_processing_duration_milliseconds")),(0,i.kt)("p",null,"Duration from the time request is processed to the time events are published. This metric is calculated per event by following formula",(0,i.kt)("inlineCode",{parentName:"p"},"(PublishedTime - ProcessedTime)/CountEvents")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Timing"))))}p.isMDXComponent=!0},5879:function(e,t,n){t.Z=n.p+"assets/images/metrics_report_time-33f69ad18c2cb9067d13089abde7dc8e.svg"}}]);