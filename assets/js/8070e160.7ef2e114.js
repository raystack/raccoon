"use strict";(self.webpackChunkraccoon=self.webpackChunkraccoon||[]).push([[822],{9365:(e,n,a)=>{a.d(n,{A:()=>l});var t=a(6540),o=a(53);const r={tabItem:"tabItem_Ymn6"};function l(e){let{children:n,hidden:a,className:l}=e;return t.createElement("div",{role:"tabpanel",className:(0,o.A)(r.tabItem,l),hidden:a},n)}},4865:(e,n,a)=>{a.d(n,{A:()=>g});var t=a(8168),o=a(6540),r=a(53),l=a(2303),i=a(1682),s=a(4595),c=a(3104);const p={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function u(e){var n;const{lazy:a,block:l,defaultValue:u,values:g,groupId:m,className:d}=e,y=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=g??y.map((e=>{let{props:{value:n,label:a,attributes:t}}=e;return{value:n,label:a,attributes:t}})),v=(0,i.X)(h,((e,n)=>e.value===n.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const E=null===u?u:u??(null==(n=y.find((e=>e.props.default)))?void 0:n.props.value)??y[0].props.value;if(null!==E&&!h.some((e=>e.value===E)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${E}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:N,setTabGroupChoices:f}=(0,s.x)(),[b,k]=(0,o.useState)(E),T=[],{blockElementScrollPositionUntilNextRender:R}=(0,c.a_)();if(null!=m){const e=N[m];null!=e&&e!==b&&h.some((n=>n.value===e))&&k(e)}const C=e=>{const n=e.currentTarget,a=T.indexOf(n),t=h[a].value;t!==b&&(R(n),k(t),null!=m&&f(m,String(t)))},_=e=>{var n;let a=null;switch(e.key){case"ArrowRight":{const n=T.indexOf(e.currentTarget)+1;a=T[n]??T[0];break}case"ArrowLeft":{const n=T.indexOf(e.currentTarget)-1;a=T[n]??T[T.length-1];break}}null==(n=a)||n.focus()};return o.createElement("div",{className:(0,r.A)("tabs-container",p.tabList)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":l},d)},h.map((e=>{let{value:n,label:a,attributes:l}=e;return o.createElement("li",(0,t.A)({role:"tab",tabIndex:b===n?0:-1,"aria-selected":b===n,key:n,ref:e=>T.push(e),onKeyDown:_,onFocus:C,onClick:C},l,{className:(0,r.A)("tabs__item",p.tabItem,null==l?void 0:l.className,{"tabs__item--active":b===n})}),a??n)}))),a?(0,o.cloneElement)(y.filter((e=>e.props.value===b))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},y.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==b})))))}function g(e){const n=(0,l.A)();return o.createElement(u,(0,t.A)({key:String(n)},e))}},6750:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var t=a(8168),o=(a(6540),a(5680)),r=a(4865),l=a(9365);a(7964);const i={},s="Quickstart",c={unversionedId:"quickstart",id:"quickstart",title:"Quickstart",description:"This document will guide you on how to get Raccoon + Kafka setup running locally. This document assumes that you have Docker (with Docker Compose) and Kafka installed on your system.",source:"@site/docs/quickstart.md",sourceDirName:".",slug:"/quickstart",permalink:"/raccoon/quickstart",draft:!1,editUrl:"https://github.com/raystack/raccoon/edit/master/docs/docs/quickstart.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Introduction",permalink:"/raccoon/"},next:{title:"Roadmap",permalink:"/raccoon/roadmap"}},p={},u=[{value:"Run Raccoon with Docker Compose",id:"run-raccoon-with-docker-compose",level:2},{value:"Publishing Your First Event",id:"publishing-your-first-event",level:2},{value:"Where To Go Next",id:"where-to-go-next",level:2}],g={toc:u},m="wrapper";function d(e){let{components:n,...a}=e;return(0,o.yg)(m,(0,t.A)({},g,a,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"quickstart"},"Quickstart"),(0,o.yg)("p",null,"This document will guide you on how to get Raccoon + Kafka setup running locally. This document assumes that you have Docker (with Docker Compose) and Kafka installed on your system. "),(0,o.yg)("h2",{id:"run-raccoon-with-docker-compose"},"Run Raccoon with Docker Compose"),(0,o.yg)("p",null,"Here's a minimal setup that runs a single node kafka-cluster along with raccoon:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yaml",metastring:'title="docker-compose.yml"',title:'"docker-compose.yml"'},'networks:\n  raccoon-network:\n\nservices:\n  zookeeper:\n    image: confluentinc/cp-zookeeper:5.1.2\n    hostname: zookeeper\n    container_name: zookeeper\n    ports:\n      - "2181:2181"\n    environment:\n      ZOOKEEPER_CLIENT_PORT: 2181\n      ZOOKEEPER_TICK_TIME: 2000\n    networks:\n      - raccoon-network\n\n  kafka:\n    image: confluentinc/cp-kafka:5.1.2\n    hostname: kafka\n    container_name: kafka\n    depends_on:\n      - zookeeper\n    ports:\n      - "9094:9094"\n      - "9092:9092"\n    environment:\n      KAFKA_BROKER_ID: 1\n      KAFKA_ZOOKEEPER_CONNECT: \'zookeeper:2181\'\n      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9094\n      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_SOCKET_REQUEST_MAX_BYTES: 1000000000\n      CONFLUENT_METRICS_ENABLE: \'false\'\n    links:\n      - zookeeper\n    networks:\n      - raccoon-network\n  raccoon:\n    image: raystack/raccoon\n    hostname: raccoon\n    container_name: raccoon\n    stdin_open: true\n    tty: true\n    depends_on:\n      - kafka\n    environment:\n      SERVER_WEBSOCKET_PORT: "8080"\n      SERVER_WEBSOCKET_CHECK_ORIGIN: "true"\n      SERVER_CORS_ENABLED: "true"\n      SERVER_CORS_ALLOWED_ORIGIN: "http://localhost:3000,http://localhost:8080"\n      SERVER_CORS_ALLOWED_METHODS: "GET,HEAD,POST,OPTIONS"\n      SERVER_WEBSOCKET_CONN_ID_HEADER: "X-User-ID"\n      SERVER_WEBSOCKET_CONN_GROUP_HEADER: "X-User-Group"\n      SERVER_GRPC_PORT: 8081\n      EVENT_DISTRIBUTION_PUBLISHER_PATTERN: "event-log"\n      PUBLISHER_KAFKA_CLIENT_BOOTSTRAP_SERVERS: "kafka:9092"\n    ports:\n      - "8080:8080"\n      - "8081:8081"\n    networks:\n      - raccoon-network\n')),(0,o.yg)("p",null,"This setup is configured to publish all events to ",(0,o.yg)("inlineCode",{parentName:"p"},"event-log")," topic. You can also configure Raccoon to ",(0,o.yg)("a",{parentName:"p",href:"/raccoon/concepts/architecture#event-distribution"},"route events to different topics based on the event type.")),(0,o.yg)("p",null,"Copy the file to your local system and run the following to start Raccoon."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"$ docker compose up\n")),(0,o.yg)("p",null,"To test whether Raccoon is running or not, you can try to ping the server."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"$ curl http://localhost:8080/ping\n")),(0,o.yg)("p",null,"To verify the event published by Raccoon. First, you need to start a Kafka listener. In a seperate terminal run:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"$ kafka-console-consumer --bootstrap-server localhost:9094 --topic 'event-log'\n")),(0,o.yg)("h2",{id:"publishing-your-first-event"},"Publishing Your First Event"),(0,o.yg)(r.A,{default:!0,mdxType:"Tabs"},(0,o.yg)(l.A,{value:"go",mdxType:"TabItem"},(0,o.yg)("p",null,"Make sure that ",(0,o.yg)("inlineCode",{parentName:"p"},"Go")," >= ",(0,o.yg)("inlineCode",{parentName:"p"},"1.16")," is installed on your system. See ",(0,o.yg)("a",{parentName:"p",href:"https://go.dev/doc/install"},"installation instructions")," on Go's website for more info."),(0,o.yg)("p",null,"Create a directory called ",(0,o.yg)("inlineCode",{parentName:"p"},"go-raccoon-example")," and initialize it as a go module"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"$ mkdir go-raccoon-example\n$ cd go-raccoon-example\n$ go mod init go-raccoon-example\n")),(0,o.yg)("p",null,"Install the raccoon client"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"$ go get github.com/raystack/raccoon/clients/go\n")),(0,o.yg)("p",null,"Create the ",(0,o.yg)("inlineCode",{parentName:"p"},"main.go")," file "),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go",metastring:'title="main.go" showLineNumbers',title:'"main.go"',showLineNumbers:!0},'package main\n\nimport (\n    "fmt"\n    "log"\n\n    raccoon "github.com/raystack/raccoon/clients/go"\n    "google.golang.org/protobuf/types/known/timestamppb"\n\n    "github.com/google/uuid"\n    "github.com/raystack/raccoon/clients/go/testdata"\n    "github.com/raystack/raccoon/clients/go/ws"\n)\n\nfunc main() {\n    client, err := ws.New(\n        ws.WithUrl("ws://localhost:8080/api/v1/events"),\n        ws.WithHeader("x-user-id", "123"),\n        ws.WithHeader("x-user-type", "ACME"))\n\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer client.Close()\n\n    _, err = client.Send([]*raccoon.Event{\n        {\n            Type: "page",\n            Data: &testdata.PageEvent{\n                EventGuid: uuid.NewString(),\n                EventName: "clicked",\n                SentTime:  timestamppb.Now(),\n            },\n        },\n    })\n\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    <-client.EventAcks()\n}\n')),(0,o.yg)("p",null,"Finally, run the program"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"$ go run main.go\n"))),(0,o.yg)(l.A,{value:"terminal",mdxType:"TabItem"},(0,o.yg)("p",null,"Make sure you have ",(0,o.yg)("inlineCode",{parentName:"p"},"curl")," installed. On a debian-based system you can install ",(0,o.yg)("inlineCode",{parentName:"p"},"curl")," via:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"$ sudo apt-get install -y curl\n")),(0,o.yg)("p",null,"Run the following to publish a single event to Raccoon"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},'$ curl -XPOST "http://localhost:8080/api/v1/events" \\\n    -H "content-type: application/json" \\\n    -H "X-User-ID: user-one" \\\n    -d "\n{\n    \\"req_guid\\": \\"foobar-123\\",\n    \\"sent_time\\": {\n        \\"seconds\\": $(date +%s),\n        \\"nanos\\": $(date +%N)\n    },\n    \\"events\\": [\n        {\n            \\"type\\": \\"page\\",\n            \\"eventBytes\\": \\"$(echo \\"EVENT\\" | base64)\\"\n        }\n    ]\n}"\n'))),(0,o.yg)(l.A,{value:"java",mdxType:"TabItem"},(0,o.yg)("p",null,"Make sure you have Java installed. Raccoon java client requires:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"JDK")," version >= 8"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"Gradle")," version >= 7")),(0,o.yg)("p",null,"Begin by creating a new java project in a folder called ",(0,o.yg)("inlineCode",{parentName:"p"},"java-raccoon-example")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"$ mkdir java-raccoon-example\n$ cd java-raccoon-example\n$ gradle init --type=java-application\n")),(0,o.yg)("p",null,"Add ",(0,o.yg)("inlineCode",{parentName:"p"},"io.odpf.raccoon")," version ",(0,o.yg)("inlineCode",{parentName:"p"},"0.1.5-rc")," in your ",(0,o.yg)("inlineCode",{parentName:"p"},"build.gradle"),". It should look something like this:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-groovy"},"plugins {\n    // Apply the application plugin to add support for building a CLI application in Java.\n    id 'application'\n}\n\nrepositories {\n    // Use Maven Central for resolving dependencies.\n    mavenCentral()\n}\n\ndependencies {\n    // Use JUnit test framework.\n    testImplementation libs.junit\n\n    // This dependency is used by the application.\n    implementation libs.guava\n    \n    // Raccoon Client library\n    implementation group: 'io.odpf', name: 'raccoon', version: '0.1.5-rc'\n}\n\n// Apply a specific Java toolchain to ease working on different environments.\njava {\n    toolchain {\n        languageVersion = JavaLanguageVersion.of(21)\n    }\n}\n\napplication {\n    // Define the main class for the application.\n    mainClass = 'org.example.App'\n}\n")),(0,o.yg)("p",null,"Edit the ",(0,o.yg)("inlineCode",{parentName:"p"},"App.java")," file and add the following code:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-java",metastring:"title=src/java/org/example/App.java showLineNumbers",title:"src/java/org/example/App.java",showLineNumbers:!0},'package org.example;\n\nimport io.odpf.raccoon.client.RestConfig;\nimport io.odpf.raccoon.client.RaccoonClient;\nimport io.odpf.raccoon.client.RaccoonClientFactory;\nimport io.odpf.raccoon.model.Event;\nimport io.odpf.raccoon.model.Response;\nimport io.odpf.raccoon.model.ResponseStatus;\nimport io.odpf.raccoon.serializer.JsonSerializer;\nimport io.odpf.raccoon.wire.ProtoWire;\n\npublic class App {\n\n    public static void main(String[] args) {\n        RestConfig config = RestConfig.builder()\n                  .url("http://localhost:8080/api/v1/events")\n                  .header("x-user-id", "123")\n                  .serializer(new JsonSerializer()) // default is Json\n                  .marshaler(new ProtoWire()) // default is Json\n                  .retryMax(5) // default is 3\n                  .retryWait(2000) // default is one second\n                  .build();\n\n        // get the rest client instance.\n        RaccoonClient Client = RaccoonClientFactory.getRestClient(config);\n\n        Response res = Client.send(new Event[]{\n                new Event("page", "EVENT".getBytes())\n        });\n\n        if (res.isSuccess() && res.getStatus() == ResponseStatus.STATUS_SUCCESS) {\n                System.out.println("The event was sent successfully");\n        }\n    }\n}\n\n')),(0,o.yg)("p",null,"Run the application using"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"$ gradle run\n"))),(0,o.yg)(l.A,{value:"js",mdxType:"TabItem"},(0,o.yg)("p",null,"Make sure you have ",(0,o.yg)("inlineCode",{parentName:"p"},"node")," >= ",(0,o.yg)("inlineCode",{parentName:"p"},"20.x")," installed. See ",(0,o.yg)("a",{parentName:"p",href:"https://nodejs.org/en/download/package-manager"},"installation instructions")," on nodejs website for more info."),(0,o.yg)("p",null,"Create a new folder called ",(0,o.yg)("inlineCode",{parentName:"p"},"js-raccoon-example")," and initalise it as a npm package."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"$ mkdir js-raccoon-example\n$ cd js-raccoon-example\n$ npm init\n")),(0,o.yg)("p",null,"Install the client using:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"$ npm install @raystack/raccoon --save\n")),(0,o.yg)("p",null,"Create a ",(0,o.yg)("inlineCode",{parentName:"p"},"main.mjs")," file with the following contents:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js",metastring:'title="main.mjs" showLineNumbers',title:'"main.mjs"',showLineNumbers:!0},"import { RaccoonClient, SerializationType, WireType } from '@raystack/raccoon';\n\nconst logger = console;\n\n//  create json messages\nconst jsonEvents = [\n    {\n        type: 'test-topic1',\n        data: { key1: 'value1', key2: ['a', 'b'] }\n    },\n    {\n        type: 'test-topic2',\n        data: { key1: 'value2', key2: { key3: 'value3', key4: 'value4' } }\n    }\n];\n\n//  initialise the raccoon client with required configs\nconst raccoonClient = new RaccoonClient({\n    serializationType: SerializationType.JSON,\n    wireType: WireType.JSON,\n    timeout: 5000,\n    url: 'http://localhost:8080/api/v1/events',\n    headers: {\n        'X-User-ID': 'user-1'\n    }\n});\n\n//  send the request\nraccoonClient\n    .send(jsonEvents)\n    .then((result) => {\n        logger.log('Result:', result);\n    })\n    .catch((error) => {\n        logger.error('Error:', error);\n    });\n")),(0,o.yg)("p",null,"Finally run this script using:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"$ node main.mjs\n")))),(0,o.yg)("h2",{id:"where-to-go-next"},"Where To Go Next"),(0,o.yg)("p",null,"For more detail about publishing events to Raccoon, you can read the ",(0,o.yg)("a",{parentName:"p",href:"/raccoon/guides/publishing"},"detailed document")," under the guides section. To understand more about how Raccoon works, you can go to the ",(0,o.yg)("a",{parentName:"p",href:"/raccoon/concepts/architecture"},"architecture document"),"."))}d.isMDXComponent=!0}}]);