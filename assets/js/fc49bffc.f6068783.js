"use strict";(self.webpackChunkraccoon=self.webpackChunkraccoon||[]).push([[462],{5680:(e,n,a)=>{a.d(n,{xA:()=>c,yg:()=>p});var l=a(6540);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,l)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,l,t=function(e,n){if(null==e)return{};var a,l,t={},i=Object.keys(e);for(l=0;l<i.length;l++)a=i[l],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)a=i[l],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var s=l.createContext({}),u=function(e){var n=l.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},c=function(e){var n=u(e.components);return l.createElement(s.Provider,{value:n},e.children)},g="mdxType",_={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},d=l.forwardRef((function(e,n){var a=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),g=u(a),d=t,p=g["".concat(s,".").concat(d)]||g[d]||_[d]||i;return a?l.createElement(p,r(r({ref:n},c),{},{components:a})):l.createElement(p,r({ref:n},c))}));function p(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=a.length,r=new Array(i);r[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[g]="string"==typeof e?e:t,r[1]=o;for(var u=2;u<i;u++)r[u]=a[u];return l.createElement.apply(null,r)}return l.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3729:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>_,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var l=a(8168),t=(a(6540),a(5680));const i={toc_max_heading_level:4},r="Metrics",o={unversionedId:"reference/metrics",id:"reference/metrics",title:"Metrics",description:"Raccoon supports statsd and prometheus as two ways to report metrics. For statsd, we recommend using Telegraf as a collection agent.",source:"@site/docs/reference/metrics.md",sourceDirName:"reference",slug:"/reference/metrics",permalink:"/raccoon/reference/metrics",draft:!1,editUrl:"https://github.com/raystack/raccoon/edit/master/docs/docs/reference/metrics.md",tags:[],version:"current",frontMatter:{toc_max_heading_level:4},sidebar:"docsSidebar",previous:{title:"Configurations",permalink:"/raccoon/reference/configurations"},next:{title:"Contribution Process",permalink:"/raccoon/contribute/contribution"}},s={},u=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Server Connection",id:"server-connection",level:2},{value:"<code>server_ping_failure_total</code>",id:"server_ping_failure_total",level:3},{value:"<code>server_pong_failure_total</code>",id:"server_pong_failure_total",level:3},{value:"<code>connections_count_current</code>",id:"connections_count_current",level:3},{value:"<code>user_connection_success_total</code>",id:"user_connection_success_total",level:3},{value:"<code>user_connection_failure_total</code>",id:"user_connection_failure_total",level:3},{value:"<code>user_session_duration_milliseconds</code>",id:"user_session_duration_milliseconds",level:3},{value:"<code>conn_close_err_count</code>",id:"conn_close_err_count",level:3},{value:"Publisher",id:"publisher",level:2},{value:"Kafka",id:"kafka",level:3},{value:"<code>kafka_messages_delivered_total</code>",id:"kafka_messages_delivered_total",level:4},{value:"<code>kafka_messages_undelivered_total</code>",id:"kafka_messages_undelivered_total",level:4},{value:"<code>kafka_unknown_topic_failure_total</code>",id:"kafka_unknown_topic_failure_total",level:4},{value:"<code>kafka_tx_messages_total</code>",id:"kafka_tx_messages_total",level:4},{value:"<code>kafka_tx_messages_bytes_total</code>",id:"kafka_tx_messages_bytes_total",level:4},{value:"<code>kafka_brokers_tx_total</code>",id:"kafka_brokers_tx_total",level:4},{value:"<code>kafka_brokers_tx_bytes_total</code>",id:"kafka_brokers_tx_bytes_total",level:4},{value:"<code>kafka_brokers_rtt_average_milliseconds</code>",id:"kafka_brokers_rtt_average_milliseconds",level:4},{value:"<code>ack_event_rtt_ms</code>",id:"ack_event_rtt_ms",level:4},{value:"<code>event_rtt_ms</code>",id:"event_rtt_ms",level:4},{value:"<code>kafka_producebulk_tt_ms</code>",id:"kafka_producebulk_tt_ms",level:4},{value:"PubSub",id:"pubsub",level:3},{value:"<code>pubsub_messages_delivered_total</code>",id:"pubsub_messages_delivered_total",level:4},{value:"<code>pubsub_messages_undelivered_total</code>",id:"pubsub_messages_undelivered_total",level:4},{value:"<code>pubsub_unknown_topic_failure_total</code>",id:"pubsub_unknown_topic_failure_total",level:4},{value:"Kinesis",id:"kinesis",level:3},{value:"<code>kinesis_messages_delivered_total</code>",id:"kinesis_messages_delivered_total",level:4},{value:"<code>kinesis_messages_undelivered_total</code>",id:"kinesis_messages_undelivered_total",level:4},{value:"<code>kinesis_unknown_stream_failure_total</code>",id:"kinesis_unknown_stream_failure_total",level:4},{value:"Resource Usage",id:"resource-usage",level:2},{value:"<code>server_mem_gc_triggered_current</code>",id:"server_mem_gc_triggered_current",level:3},{value:"<code>server_mem_gc_pauseNs_current</code>",id:"server_mem_gc_pausens_current",level:3},{value:"<code>server_mem_gc_count_current</code>",id:"server_mem_gc_count_current",level:3},{value:"<code>server_mem_gc_pauseTotalNs_current</code>",id:"server_mem_gc_pausetotalns_current",level:3},{value:"<code>server_mem_heap_alloc_bytes_current</code>",id:"server_mem_heap_alloc_bytes_current",level:3},{value:"<code>server_mem_heap_inuse_bytes_current</code>",id:"server_mem_heap_inuse_bytes_current",level:3},{value:"<code>server_mem_heap_objects_total_current</code>",id:"server_mem_heap_objects_total_current",level:3},{value:"<code>server_go_routines_count_current</code>",id:"server_go_routines_count_current",level:3},{value:"<code>server_mem_stack_inuse_bytes_current</code>",id:"server_mem_stack_inuse_bytes_current",level:3},{value:"Event Delivery",id:"event-delivery",level:2},{value:"<code>events_rx_bytes_total</code>",id:"events_rx_bytes_total",level:3},{value:"<code>events_rx_total</code>",id:"events_rx_total",level:3},{value:"<code>events_duplicate_total</code>",id:"events_duplicate_total",level:3},{value:"<code>batches_read_total</code>",id:"batches_read_total",level:3},{value:"<code>batch_idle_in_channel_milliseconds</code>",id:"batch_idle_in_channel_milliseconds",level:3},{value:"<code>event_processing_duration_milliseconds</code>",id:"event_processing_duration_milliseconds",level:3},{value:"<code>server_processing_latency_milliseconds</code>",id:"server_processing_latency_milliseconds",level:3},{value:"<code>worker_processing_duration_milliseconds</code>",id:"worker_processing_duration_milliseconds",level:3}],c={toc:u},g="wrapper";function _(e){let{components:n,...i}=e;return(0,t.yg)(g,(0,l.A)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"metrics"},"Metrics"),(0,t.yg)("p",null,"Raccoon supports ",(0,t.yg)("inlineCode",{parentName:"p"},"statsd")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"prometheus")," as two ways to report metrics. For statsd, we recommend using ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/influxdata/telegraf"},"Telegraf")," as a collection agent."),(0,t.yg)("p",null,"This page contains the reference for all the metrics exposed by Raccoon."),(0,t.yg)("h2",{id:"table-of-contents"},"Table of Contents"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/raccoon/reference/metrics#server-connection"},"Server Connection")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/raccoon/reference/metrics#publisher"},"Publisher"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#kafka"},"Kafka")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#pubsub"},"PubSub")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#kinesis"},"Kinesis")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/raccoon/reference/metrics#pubsub-publisher"},"PubSub Publisher")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/raccoon/reference/metrics#kinesis-publisher"},"Kinesis Publisher")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/raccoon/reference/metrics#resource-usage"},"Resource Usage")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/raccoon/reference/metrics#event-delivery"},"Event Delivery"))),(0,t.yg)("h2",{id:"server-connection"},"Server Connection"),(0,t.yg)("h3",{id:"server_ping_failure_total"},(0,t.yg)("inlineCode",{parentName:"h3"},"server_ping_failure_total")),(0,t.yg)("p",null,"Total ping that server fails to send"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Counting")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,t.yg)("h3",{id:"server_pong_failure_total"},(0,t.yg)("inlineCode",{parentName:"h3"},"server_pong_failure_total")),(0,t.yg)("p",null,"Total pong that server fails to send"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Counting")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,t.yg)("h3",{id:"connections_count_current"},(0,t.yg)("inlineCode",{parentName:"h3"},"connections_count_current")),(0,t.yg)("p",null,"Number of alive connections"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Gauge")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,t.yg)("h3",{id:"user_connection_success_total"},(0,t.yg)("inlineCode",{parentName:"h3"},"user_connection_success_total")),(0,t.yg)("p",null,"Number of successful connections established to the server"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Count")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,t.yg)("h3",{id:"user_connection_failure_total"},(0,t.yg)("inlineCode",{parentName:"h3"},"user_connection_failure_total")),(0,t.yg)("p",null,"Number of fail connections established to the server"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Count")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"reason=ugfailure")," ",(0,t.yg)("inlineCode",{parentName:"li"},"reason=exists")," ",(0,t.yg)("inlineCode",{parentName:"li"},"reason=serverlimit")," ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,t.yg)("h3",{id:"user_session_duration_milliseconds"},(0,t.yg)("inlineCode",{parentName:"h3"},"user_session_duration_milliseconds")),(0,t.yg)("p",null,"Duration of alive connection per session per connection"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Timing")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,t.yg)("h3",{id:"conn_close_err_count"},(0,t.yg)("inlineCode",{parentName:"h3"},"conn_close_err_count")),(0,t.yg)("p",null,"Number of connection close errors encountered"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Count")),(0,t.yg)("li",{parentName:"ul"},"Tags: NA")),(0,t.yg)("h2",{id:"publisher"},"Publisher"),(0,t.yg)("h3",{id:"kafka"},"Kafka"),(0,t.yg)("h4",{id:"kafka_messages_delivered_total"},(0,t.yg)("inlineCode",{parentName:"h4"},"kafka_messages_delivered_total")),(0,t.yg)("p",null,"Number of delivered events to Kafka. The metric also contains false increments. To find the true value, one should use the difference between this and ",(0,t.yg)("inlineCode",{parentName:"p"},"kafka_messages_undelivered_total")," metric for the same tag/labels."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Count")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"success=false")," ",(0,t.yg)("inlineCode",{parentName:"li"},"success=true")," ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*")," ",(0,t.yg)("inlineCode",{parentName:"li"},"event_type=*"))),(0,t.yg)("h4",{id:"kafka_messages_undelivered_total"},(0,t.yg)("inlineCode",{parentName:"h4"},"kafka_messages_undelivered_total")),(0,t.yg)("p",null,"The count of false increments done by ",(0,t.yg)("inlineCode",{parentName:"p"},"kafka_messages_delivered_total"),". To be used in conjunction with the former for accurate metrics."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Count")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"success=false")," ",(0,t.yg)("inlineCode",{parentName:"li"},"success=true")," ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*")," ",(0,t.yg)("inlineCode",{parentName:"li"},"event_type=*"))),(0,t.yg)("h4",{id:"kafka_unknown_topic_failure_total"},(0,t.yg)("inlineCode",{parentName:"h4"},"kafka_unknown_topic_failure_total")),(0,t.yg)("p",null,"Number of delivery failure caused by topic does not exist in kafka."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Count")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"topic=topicname")," ",(0,t.yg)("inlineCode",{parentName:"li"},"event_type=*"))),(0,t.yg)("h4",{id:"kafka_tx_messages_total"},(0,t.yg)("inlineCode",{parentName:"h4"},"kafka_tx_messages_total")),(0,t.yg)("p",null,"Total number of messages transmitted ","(","produced",")"," to Kafka brokers."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Gauge"))),(0,t.yg)("h4",{id:"kafka_tx_messages_bytes_total"},(0,t.yg)("inlineCode",{parentName:"h4"},"kafka_tx_messages_bytes_total")),(0,t.yg)("p",null,"Total number of message bytes ","(","including framing, such as per-Message framing and MessageSet/batch framing",")"," transmitted to Kafka brokers"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Gauge"))),(0,t.yg)("h4",{id:"kafka_brokers_tx_total"},(0,t.yg)("inlineCode",{parentName:"h4"},"kafka_brokers_tx_total")),(0,t.yg)("p",null,"Total number of requests sent to Kafka brokers"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Gauge")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"broker=broker_nodes"))),(0,t.yg)("h4",{id:"kafka_brokers_tx_bytes_total"},(0,t.yg)("inlineCode",{parentName:"h4"},"kafka_brokers_tx_bytes_total")),(0,t.yg)("p",null,"Total number of bytes transmitted to Kafka brokers"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Gauge")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"broker=broker_nodes"))),(0,t.yg)("h4",{id:"kafka_brokers_rtt_average_milliseconds"},(0,t.yg)("inlineCode",{parentName:"h4"},"kafka_brokers_rtt_average_milliseconds")),(0,t.yg)("p",null,"Broker latency / round-trip time in microseconds"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Gauge")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"broker=broker_nodes"))),(0,t.yg)("h4",{id:"ack_event_rtt_ms"},(0,t.yg)("inlineCode",{parentName:"h4"},"ack_event_rtt_ms")),(0,t.yg)("p",null,"Time taken from ack function called by kafka producer to processed by the ack handler."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Timing")),(0,t.yg)("li",{parentName:"ul"},"Tags: NA")),(0,t.yg)("h4",{id:"event_rtt_ms"},(0,t.yg)("inlineCode",{parentName:"h4"},"event_rtt_ms")),(0,t.yg)("p",null,"Time taken from event is consumed from the queue to be acked by the ack handler."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Timing")),(0,t.yg)("li",{parentName:"ul"},"Tags: NA")),(0,t.yg)("h4",{id:"kafka_producebulk_tt_ms"},(0,t.yg)("inlineCode",{parentName:"h4"},"kafka_producebulk_tt_ms")),(0,t.yg)("p",null,"Response time of produce batch method of the kafka producer"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type ",(0,t.yg)("inlineCode",{parentName:"li"},"Timing")),(0,t.yg)("li",{parentName:"ul"},"Tags: NA")),(0,t.yg)("h3",{id:"pubsub"},"PubSub"),(0,t.yg)("h4",{id:"pubsub_messages_delivered_total"},(0,t.yg)("inlineCode",{parentName:"h4"},"pubsub_messages_delivered_total")),(0,t.yg)("p",null,"Number of delivered events to PubSub. The metric also contains false increments. To find the true value, one should use the difference between this and ",(0,t.yg)("inlineCode",{parentName:"p"},"pubsub_messages_undelivered_total")," metric for the same tag/labels."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Count")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"success=false")," ",(0,t.yg)("inlineCode",{parentName:"li"},"success=true")," ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*")," ",(0,t.yg)("inlineCode",{parentName:"li"},"event_type=*"))),(0,t.yg)("h4",{id:"pubsub_messages_undelivered_total"},(0,t.yg)("inlineCode",{parentName:"h4"},"pubsub_messages_undelivered_total")),(0,t.yg)("p",null,"The count of false increments done by ",(0,t.yg)("inlineCode",{parentName:"p"},"pubsub_messages_delivered_total"),". To be used in conjunction with the former for accurate metrics."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Count")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"success=false")," ",(0,t.yg)("inlineCode",{parentName:"li"},"success=true")," ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*")," ",(0,t.yg)("inlineCode",{parentName:"li"},"event_type=*"))),(0,t.yg)("h4",{id:"pubsub_unknown_topic_failure_total"},(0,t.yg)("inlineCode",{parentName:"h4"},"pubsub_unknown_topic_failure_total")),(0,t.yg)("p",null,"Number of delivery failure caused by topic does not exist in PubSub."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Count")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"topic=topicname")," ",(0,t.yg)("inlineCode",{parentName:"li"},"event_type=*")," ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,t.yg)("h3",{id:"kinesis"},"Kinesis"),(0,t.yg)("h4",{id:"kinesis_messages_delivered_total"},(0,t.yg)("inlineCode",{parentName:"h4"},"kinesis_messages_delivered_total")),(0,t.yg)("p",null,"Number of delivered events to Kinesis. The metric also contains false increments. To find the true value, one should use the difference between this and ",(0,t.yg)("inlineCode",{parentName:"p"},"kinesis_messages_undelivered_total")," metric for the same tag/labels."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Count")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"success=false")," ",(0,t.yg)("inlineCode",{parentName:"li"},"success=true")," ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*")," ",(0,t.yg)("inlineCode",{parentName:"li"},"event_type=*"))),(0,t.yg)("h4",{id:"kinesis_messages_undelivered_total"},(0,t.yg)("inlineCode",{parentName:"h4"},"kinesis_messages_undelivered_total")),(0,t.yg)("p",null,"The count of false increments done by ",(0,t.yg)("inlineCode",{parentName:"p"},"kinesis_messages_delivered_total"),". To be used in conjunction with the former for accurate metrics."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Count")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"success=false")," ",(0,t.yg)("inlineCode",{parentName:"li"},"success=true")," ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*")," ",(0,t.yg)("inlineCode",{parentName:"li"},"event_type=*"))),(0,t.yg)("h4",{id:"kinesis_unknown_stream_failure_total"},(0,t.yg)("inlineCode",{parentName:"h4"},"kinesis_unknown_stream_failure_total")),(0,t.yg)("p",null,"Number of delivery failure caused by stream does not exist in Kinesis."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Count")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"stream=streamname")," ",(0,t.yg)("inlineCode",{parentName:"li"},"event_type=*")," ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,t.yg)("h2",{id:"resource-usage"},"Resource Usage"),(0,t.yg)("h3",{id:"server_mem_gc_triggered_current"},(0,t.yg)("inlineCode",{parentName:"h3"},"server_mem_gc_triggered_current")),(0,t.yg)("p",null,"The time the last garbage collection finished in Unix timestamp"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Gauge"))),(0,t.yg)("h3",{id:"server_mem_gc_pausens_current"},(0,t.yg)("inlineCode",{parentName:"h3"},"server_mem_gc_pauseNs_current")),(0,t.yg)("p",null,"Circular buffer of recent GC stop-the-world in Unix timestamp"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Gauge"))),(0,t.yg)("h3",{id:"server_mem_gc_count_current"},(0,t.yg)("inlineCode",{parentName:"h3"},"server_mem_gc_count_current")),(0,t.yg)("p",null,"The number of completed GC cycle"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Gauge"))),(0,t.yg)("h3",{id:"server_mem_gc_pausetotalns_current"},(0,t.yg)("inlineCode",{parentName:"h3"},"server_mem_gc_pauseTotalNs_current")),(0,t.yg)("p",null,"The cumulative nanoseconds in GC stop-the-world pauses since the program started"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Gauge"))),(0,t.yg)("h3",{id:"server_mem_heap_alloc_bytes_current"},(0,t.yg)("inlineCode",{parentName:"h3"},"server_mem_heap_alloc_bytes_current")),(0,t.yg)("p",null,"Bytes of allocated heap objects"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Gauge"))),(0,t.yg)("h3",{id:"server_mem_heap_inuse_bytes_current"},(0,t.yg)("inlineCode",{parentName:"h3"},"server_mem_heap_inuse_bytes_current")),(0,t.yg)("p",null,"HeapInuse is bytes in in-use spans"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Gauge"))),(0,t.yg)("h3",{id:"server_mem_heap_objects_total_current"},(0,t.yg)("inlineCode",{parentName:"h3"},"server_mem_heap_objects_total_current")),(0,t.yg)("p",null,"Number of allocated heap objects"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Gauge"))),(0,t.yg)("h3",{id:"server_go_routines_count_current"},(0,t.yg)("inlineCode",{parentName:"h3"},"server_go_routines_count_current")),(0,t.yg)("p",null,"Number of goroutine spawn in a single flush"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Gauge"))),(0,t.yg)("h3",{id:"server_mem_stack_inuse_bytes_current"},(0,t.yg)("inlineCode",{parentName:"h3"},"server_mem_stack_inuse_bytes_current")),(0,t.yg)("p",null,"Bytes in stack spans"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Gauge"))),(0,t.yg)("h2",{id:"event-delivery"},"Event Delivery"),(0,t.yg)("p",null,"Following metrics are event delivery reports. Each metrics reported at a different point in time. See the diagram below for to understand when each metrics are reported."),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Diagram",src:a(1722).A,width:"585",height:"381"})),(0,t.yg)("h3",{id:"events_rx_bytes_total"},(0,t.yg)("inlineCode",{parentName:"h3"},"events_rx_bytes_total")),(0,t.yg)("p",null,"Total byte received in requests"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Count")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*")," ",(0,t.yg)("inlineCode",{parentName:"li"},"event_type=*"))),(0,t.yg)("h3",{id:"events_rx_total"},(0,t.yg)("inlineCode",{parentName:"h3"},"events_rx_total")),(0,t.yg)("p",null,"Number of events received in requests"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Count")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*")," ",(0,t.yg)("inlineCode",{parentName:"li"},"event_type=*"))),(0,t.yg)("h3",{id:"events_duplicate_total"},(0,t.yg)("inlineCode",{parentName:"h3"},"events_duplicate_total")),(0,t.yg)("p",null,"Number of duplicate events"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Count")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*")," ",(0,t.yg)("inlineCode",{parentName:"li"},"reason=*"))),(0,t.yg)("h3",{id:"batches_read_total"},(0,t.yg)("inlineCode",{parentName:"h3"},"batches_read_total")),(0,t.yg)("p",null,"Request count"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Count")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"status=failed")," ",(0,t.yg)("inlineCode",{parentName:"li"},"status=success")," ",(0,t.yg)("inlineCode",{parentName:"li"},"reason=*")," ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,t.yg)("h3",{id:"batch_idle_in_channel_milliseconds"},(0,t.yg)("inlineCode",{parentName:"h3"},"batch_idle_in_channel_milliseconds")),(0,t.yg)("p",null,"Duration from when the request is received to when the request is processed. High value of this metric indicates the publisher is slow."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Timing")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"worker=worker-name"))),(0,t.yg)("h3",{id:"event_processing_duration_milliseconds"},(0,t.yg)("inlineCode",{parentName:"h3"},"event_processing_duration_milliseconds")),(0,t.yg)("p",null,"Duration from the time request is sent to the time events are published. This metric is calculated per event by following formula ",(0,t.yg)("inlineCode",{parentName:"p"},"(PublishedTime - SentTime)/CountEvents")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Timing")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,t.yg)("h3",{id:"server_processing_latency_milliseconds"},(0,t.yg)("inlineCode",{parentName:"h3"},"server_processing_latency_milliseconds")),(0,t.yg)("p",null,"Duration from the time request is received to the time events are published. This metric is calculated per event by following formula",(0,t.yg)("inlineCode",{parentName:"p"},"(PublishedTime - ReceivedTime)/CountEvents")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Timing")),(0,t.yg)("li",{parentName:"ul"},"Tags: ",(0,t.yg)("inlineCode",{parentName:"li"},"conn_group=*"))),(0,t.yg)("h3",{id:"worker_processing_duration_milliseconds"},(0,t.yg)("inlineCode",{parentName:"h3"},"worker_processing_duration_milliseconds")),(0,t.yg)("p",null,"Duration from the time request is processed to the time events are published. This metric is calculated per event by following formula",(0,t.yg)("inlineCode",{parentName:"p"},"(PublishedTime - ProcessedTime)/CountEvents")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"Timing"))))}_.isMDXComponent=!0},1722:(e,n,a)=>{a.d(n,{A:()=>l});const l=a.p+"assets/images/metrics_report_time-33f69ad18c2cb9067d13089abde7dc8e.svg"}}]);