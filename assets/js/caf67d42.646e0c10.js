"use strict";(self.webpackChunkraccoon=self.webpackChunkraccoon||[]).push([[944],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var r=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=i,g=u["".concat(s,".").concat(d)]||u[d]||y[d]||a;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5322:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>y,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(8168),i=(n(6540),n(5680));const a={},o="Overview",l={unversionedId:"clients/overview",id:"clients/overview",title:"Overview",description:"Introduction",source:"@site/docs/clients/overview.md",sourceDirName:"clients",slug:"/clients/overview",permalink:"/raccoon/clients/overview",draft:!1,editUrl:"https://github.com/raystack/raccoon/edit/master/docs/docs/clients/overview.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Troubleshooting",permalink:"/raccoon/guides/troubleshooting"},next:{title:"Golang",permalink:"/raccoon/clients/golang"}},s={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Wire and Serialization Types",id:"wire-and-serialization-types",level:2},{value:"Getting Started",id:"getting-started",level:2}],p={toc:c},u="wrapper";function y(e){let{components:t,...n}=e;return(0,i.yg)(u,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"overview"},"Overview"),(0,i.yg)("h2",{id:"introduction"},"Introduction"),(0,i.yg)("p",null,"Raccoon provides a suite of client libraries designed to help developers easily send clickstream events to its low-latency, high-throughput event ingestion service. Whether you\u2019re building real-time analytics, tracking user behavior, or processing large-scale event data, Raccoon's clients offer flexible and efficient integration via WebSocket, REST, and gRPC APIs."),(0,i.yg)("h2",{id:"key-features"},"Key Features"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Multi-Protocol Support"),": WebSocket, REST, and gRPC are available in all clients, allowing you to choose the best fit for your application\u2019s needs."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Ease of Integration"),": Designed with simplicity in mind, the clients integrate easily into existing projects with minimal configuration."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Reliability"),": Each client includes retry mechanisms and error handling to ensure events are delivered reliably, even in the face of transient failures.")),(0,i.yg)("h2",{id:"wire-and-serialization-types"},"Wire and Serialization Types"),(0,i.yg)("p",null,"A concept that exists in all the Client libraries is that of wire type and serialization type."),(0,i.yg)("p",null,"Raccoon's API accepts both JSON and Protobuf requests. These are differentiated by the ",(0,i.yg)("inlineCode",{parentName:"p"},"Content-Type")," header (in case of REST & gRPC protocols) and by ",(0,i.yg)("inlineCode",{parentName:"p"},"MessageType")," for Websocket requests."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"Wire")," denotes what the request payload is serialised as. If wire type is ",(0,i.yg)("inlineCode",{parentName:"p"},"JSON")," the request is sent as a JSON-encoded string. If it's ",(0,i.yg)("inlineCode",{parentName:"p"},"Protobuf")," the request is the serialized bytes of ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/raystack/proton/blob/main/raystack/raccoon/v1beta1/raccoon.proto#L23"},(0,i.yg)("inlineCode",{parentName:"a"},"SendEventRequest"))," proto"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"Serialization")," is how data in individual events is encoded. Just like wire type, it also supports ",(0,i.yg)("inlineCode",{parentName:"p"},"JSON")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"Protobuf")," encoding."),(0,i.yg)("p",null,"You may use any combination of wire and serialization type that suits your needs."),(0,i.yg)("h2",{id:"getting-started"},"Getting Started"),(0,i.yg)("p",null,"To start using Raccoon's client libraries, check out the detailed installation and usage instructions for each supported language:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/raccoon/clients/golang"},"Golang")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/raccoon/clients/python"},"Python")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/raccoon/clients/java"},"Java")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"/raccoon/clients/javascript"},"JavaScript"))),(0,i.yg)("p",null,"By leveraging Raccoon\u2019s clients, you can focus on building your applications while Raccoon efficiently handles the ingestion of your clickstream events."))}y.isMDXComponent=!0}}]);