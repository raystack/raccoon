// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: raystack/raccoon/v1beta1/raccoon.proto

package raccoonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_STATUS_UNSPECIFIED Status = 0
	Status_STATUS_SUCCESS     Status = 1
	Status_STATUS_ERROR       Status = 2
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_raystack_raccoon_v1beta1_raccoon_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_raystack_raccoon_v1beta1_raccoon_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_raystack_raccoon_v1beta1_raccoon_proto_rawDescGZIP(), []int{0}
}

type Code int32

const (
	// `CODE_UNSPECIFIED` indicates no appropriate/existing code can describe it.
	Code_CODE_UNSPECIFIED Code = 0
	// `OK` indicates the request is processed successfully.
	Code_CODE_OK Code = 1
	// `BAD_REQUEST` indicates there is something wrong with the request.
	Code_CODE_BAD_REQUEST Code = 2
	// `INTERNAL_ERROR` indicates that Raccoon encountered an unexpected condition that prevented it from fulfilling the request.
	Code_CODE_INTERNAL_ERROR Code = 3
	// `MAX_CONNECTION_LIMIT_REACHED` indicates that Raccoon is unable to accepts new connection due to max connection is reached.
	//
	// To prevent Raccoon from eating up resources, connection limit needs to be set. The limit is configurable on Raccoon by setting `SERVER_WEBSOCKET_MAX_CONN`
	Code_CODE_MAX_CONNECTION_LIMIT_REACHED Code = 4
	// `MAX_USER_LIMIT_REACHED` indicates that existing connection with the same ID.
	//
	// Raccoon ensures unique connection using unique identifier passed from the header
	// the first time Websocket connection is established. The header key that
	// contains unique identifier is configurable on Raccoon by setting `SERVER_WEBSOCKET_CONN_UNIQ_ID_HEADER`
	Code_CODE_MAX_USER_LIMIT_REACHED Code = 5
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0: "CODE_UNSPECIFIED",
		1: "CODE_OK",
		2: "CODE_BAD_REQUEST",
		3: "CODE_INTERNAL_ERROR",
		4: "CODE_MAX_CONNECTION_LIMIT_REACHED",
		5: "CODE_MAX_USER_LIMIT_REACHED",
	}
	Code_value = map[string]int32{
		"CODE_UNSPECIFIED":                  0,
		"CODE_OK":                           1,
		"CODE_BAD_REQUEST":                  2,
		"CODE_INTERNAL_ERROR":               3,
		"CODE_MAX_CONNECTION_LIMIT_REACHED": 4,
		"CODE_MAX_USER_LIMIT_REACHED":       5,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_raystack_raccoon_v1beta1_raccoon_proto_enumTypes[1].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_raystack_raccoon_v1beta1_raccoon_proto_enumTypes[1]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_raystack_raccoon_v1beta1_raccoon_proto_rawDescGZIP(), []int{1}
}

// `EventRequest` defines the contract to push events to Raccoon
//
// An `EventRequest` allows you to push more than one events(batch). The events
// are wrapped inside `events` repeated field. All of the fields on `EventRequest`
// are required.
type SendEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `req_guid` is unique identifier of the request the client is making.
	//
	// Raccoon uses the identifier to send response of the request. The client can handle the
	// response accordingly. For example, the client can retry the request in case the response is
	// giving `INTERNAL_ERROR` code with "publisher failed" reason.
	//
	// This identifier is necessary because on event-based protocols like WebSocket the response is
	// returned asynchronously. If there is no identifier, no way the client can tell which response
	// belongs to which request.
	//
	// Apart from sending response, `req_guid` is used to log some informations on 'debug' level. You can search the
	// debug logs with `ReqGUID` keyword.
	ReqGuid string `protobuf:"bytes,1,opt,name=req_guid,json=reqGuid,proto3" json:"req_guid,omitempty"`
	// `sent_time` defines the time the request is sent.
	//
	// `sent_time` is used to calculate various metrics. The main metric uses `sent_time` is duration from the
	// request is sent until the events are published.
	SentTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=sent_time,json=sentTime,proto3" json:"sent_time,omitempty"`
	// `events` is where the client put all the events wrapped in `Event`.
	//
	// As mentioned above, the request allows the client to push more than one event. Normally you want to batch
	// the events to optimize the network call.
	Events []*Event `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *SendEventRequest) Reset() {
	*x = SendEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raystack_raccoon_v1beta1_raccoon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEventRequest) ProtoMessage() {}

func (x *SendEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raystack_raccoon_v1beta1_raccoon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEventRequest.ProtoReflect.Descriptor instead.
func (*SendEventRequest) Descriptor() ([]byte, []int) {
	return file_raystack_raccoon_v1beta1_raccoon_proto_rawDescGZIP(), []int{0}
}

func (x *SendEventRequest) GetReqGuid() string {
	if x != nil {
		return x.ReqGuid
	}
	return ""
}

func (x *SendEventRequest) GetSentTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SentTime
	}
	return nil
}

func (x *SendEventRequest) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `event_bytes` is where you put bytes serialized event.
	EventBytes []byte `protobuf:"bytes,1,opt,name=event_bytes,json=eventBytes,proto3" json:"event_bytes,omitempty"`
	// `type` denotes an event type that the producer of this proto message may set.
	//
	// It is currently used by raccoon to distribute events to respective Kafka topics. However the
	// users of this proto can use this type to set strings which can be processed in their
	// ingestion systems to distribute or perform other functions.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raystack_raccoon_v1beta1_raccoon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_raystack_raccoon_v1beta1_raccoon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_raystack_raccoon_v1beta1_raccoon_proto_rawDescGZIP(), []int{1}
}

func (x *Event) GetEventBytes() []byte {
	if x != nil {
		return x.EventBytes
	}
	return nil
}

func (x *Event) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type SendEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `status` denotes status of the request.
	//
	// Only 3 values are valid. `SUCCESS` means the the request is processed
	// successfully. `ERROR` means the request failed to be processed. `UNKNOWN_STATUS`
	// means Raccoon unable to determine whether the request is success or not.
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=raystack.raccoon.v1beta1.Status" json:"status,omitempty"`
	// `code` gives more detail of what happened to the request.
	//
	// Details of available `code` can be seen below.
	Code Code `protobuf:"varint,2,opt,name=code,proto3,enum=raystack.raccoon.v1beta1.Code" json:"code,omitempty"`
	// `sent_time` is UNIX timestamp populated by Raccoon by the time the response is sent.
	SentTime int64 `protobuf:"varint,3,opt,name=sent_time,json=sentTime,proto3" json:"sent_time,omitempty"`
	// `reason` is additional-human readable information to provide more context to `status` and `code`.
	//
	// There is no predefined structure for this. The value is arbitrary.
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// `data` is arbitrary extra metadata.
	//
	// Arbitrary key-value makes the field flexible for future changes. `req_guid` is also sent as part
	// of `data`. The client may fetch req_guid as key to get the `req_guid` value.
	Data map[string]string `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SendEventResponse) Reset() {
	*x = SendEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raystack_raccoon_v1beta1_raccoon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEventResponse) ProtoMessage() {}

func (x *SendEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raystack_raccoon_v1beta1_raccoon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEventResponse.ProtoReflect.Descriptor instead.
func (*SendEventResponse) Descriptor() ([]byte, []int) {
	return file_raystack_raccoon_v1beta1_raccoon_proto_rawDescGZIP(), []int{2}
}

func (x *SendEventResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_UNSPECIFIED
}

func (x *SendEventResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_CODE_UNSPECIFIED
}

func (x *SendEventResponse) GetSentTime() int64 {
	if x != nil {
		return x.SentTime
	}
	return 0
}

func (x *SendEventResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *SendEventResponse) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_raystack_raccoon_v1beta1_raccoon_proto protoreflect.FileDescriptor

var file_raystack_raccoon_v1beta1_raccoon_proto_rawDesc = []byte{
	0x0a, 0x26, 0x72, 0x61, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x72, 0x61, 0x63, 0x63, 0x6f,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x61, 0x63, 0x63, 0x6f,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x72, 0x61, 0x79, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2e, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x47,
	0x75, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x61, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3c, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xba, 0x02, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x79, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2e, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x72, 0x61, 0x63,
	0x63, 0x6f, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x72, 0x61, 0x79,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x2a, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0xa0, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4f, 0x4b, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x44,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x05, 0x32, 0x74, 0x0a, 0x0c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x09, 0x53,
	0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x72, 0x61, 0x79, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2e, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x72, 0x61, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e,
	0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x5b, 0x0a, 0x1a, 0x69, 0x6f, 0x2e, 0x72, 0x61, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x2e, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e, 0x42,
	0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x79, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6e, 0x2f, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x6f, 0x6e, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_raystack_raccoon_v1beta1_raccoon_proto_rawDescOnce sync.Once
	file_raystack_raccoon_v1beta1_raccoon_proto_rawDescData = file_raystack_raccoon_v1beta1_raccoon_proto_rawDesc
)

func file_raystack_raccoon_v1beta1_raccoon_proto_rawDescGZIP() []byte {
	file_raystack_raccoon_v1beta1_raccoon_proto_rawDescOnce.Do(func() {
		file_raystack_raccoon_v1beta1_raccoon_proto_rawDescData = protoimpl.X.CompressGZIP(file_raystack_raccoon_v1beta1_raccoon_proto_rawDescData)
	})
	return file_raystack_raccoon_v1beta1_raccoon_proto_rawDescData
}

var file_raystack_raccoon_v1beta1_raccoon_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_raystack_raccoon_v1beta1_raccoon_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_raystack_raccoon_v1beta1_raccoon_proto_goTypes = []interface{}{
	(Status)(0),                   // 0: raystack.raccoon.v1beta1.Status
	(Code)(0),                     // 1: raystack.raccoon.v1beta1.Code
	(*SendEventRequest)(nil),      // 2: raystack.raccoon.v1beta1.SendEventRequest
	(*Event)(nil),                 // 3: raystack.raccoon.v1beta1.Event
	(*SendEventResponse)(nil),     // 4: raystack.raccoon.v1beta1.SendEventResponse
	nil,                           // 5: raystack.raccoon.v1beta1.SendEventResponse.DataEntry
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_raystack_raccoon_v1beta1_raccoon_proto_depIdxs = []int32{
	6, // 0: raystack.raccoon.v1beta1.SendEventRequest.sent_time:type_name -> google.protobuf.Timestamp
	3, // 1: raystack.raccoon.v1beta1.SendEventRequest.events:type_name -> raystack.raccoon.v1beta1.Event
	0, // 2: raystack.raccoon.v1beta1.SendEventResponse.status:type_name -> raystack.raccoon.v1beta1.Status
	1, // 3: raystack.raccoon.v1beta1.SendEventResponse.code:type_name -> raystack.raccoon.v1beta1.Code
	5, // 4: raystack.raccoon.v1beta1.SendEventResponse.data:type_name -> raystack.raccoon.v1beta1.SendEventResponse.DataEntry
	2, // 5: raystack.raccoon.v1beta1.EventService.SendEvent:input_type -> raystack.raccoon.v1beta1.SendEventRequest
	4, // 6: raystack.raccoon.v1beta1.EventService.SendEvent:output_type -> raystack.raccoon.v1beta1.SendEventResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_raystack_raccoon_v1beta1_raccoon_proto_init() }
func file_raystack_raccoon_v1beta1_raccoon_proto_init() {
	if File_raystack_raccoon_v1beta1_raccoon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_raystack_raccoon_v1beta1_raccoon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raystack_raccoon_v1beta1_raccoon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raystack_raccoon_v1beta1_raccoon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_raystack_raccoon_v1beta1_raccoon_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_raystack_raccoon_v1beta1_raccoon_proto_goTypes,
		DependencyIndexes: file_raystack_raccoon_v1beta1_raccoon_proto_depIdxs,
		EnumInfos:         file_raystack_raccoon_v1beta1_raccoon_proto_enumTypes,
		MessageInfos:      file_raystack_raccoon_v1beta1_raccoon_proto_msgTypes,
	}.Build()
	File_raystack_raccoon_v1beta1_raccoon_proto = out.File
	file_raystack_raccoon_v1beta1_raccoon_proto_rawDesc = nil
	file_raystack_raccoon_v1beta1_raccoon_proto_goTypes = nil
	file_raystack_raccoon_v1beta1_raccoon_proto_depIdxs = nil
}
