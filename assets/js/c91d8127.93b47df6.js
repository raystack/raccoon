"use strict";(self.webpackChunkraccoon=self.webpackChunkraccoon||[]).push([[472],{5680:(e,n,t)=>{t.d(n,{xA:()=>g,yg:()=>u});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},g=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),p=c(t),y=r,u=p["".concat(s,".").concat(y)]||p[y]||d[y]||i;return t?a.createElement(u,o(o({ref:n},g),{},{components:t})):a.createElement(u,o({ref:n},g))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=y;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},7735:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(8168),r=(t(6540),t(5680));const i={},o="Golang",l={unversionedId:"clients/golang",id:"clients/golang",title:"Golang",description:"Requirements",source:"@site/docs/clients/golang.md",sourceDirName:"clients",slug:"/clients/golang",permalink:"/raccoon/clients/golang",draft:!1,editUrl:"https://github.com/raystack/raccoon/edit/master/docs/docs/clients/golang.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Overview",permalink:"/raccoon/clients/overview"},next:{title:"Python",permalink:"/raccoon/clients/python"}},s={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Quickstart",id:"quickstart",level:3},{value:"Guide",id:"guide",level:3},{value:"Creating a client",id:"creating-a-client",level:4},{value:"Sending events",id:"sending-events",level:4},{value:"Examples",id:"examples",level:3}],g={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.yg)(p,(0,a.A)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"golang"},"Golang"),(0,r.yg)("h2",{id:"requirements"},"Requirements"),(0,r.yg)("p",null,"Make sure that Go >= ",(0,r.yg)("inlineCode",{parentName:"p"},"1.16")," is installed on your system. See ",(0,r.yg)("a",{parentName:"p",href:"https://go.dev/doc/install"},"installation instructions")," on Go's website for more info."),(0,r.yg)("h2",{id:"installation"},"Installation"),(0,r.yg)("p",null,"Install Raccoon's Go client using ",(0,r.yg)("a",{parentName:"p",href:"https://go.dev/ref/mod#go-get"},"go get")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"$ go get github.com/raystack/raccoon/clients/go\n")),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)("h3",{id:"quickstart"},"Quickstart"),(0,r.yg)("p",null,"Below is a self contained example of Raccoon's Go client that uses the Websocket API to publish events"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go",metastring:'title="quickstart.go" showLineNumbers',title:'"quickstart.go"',showLineNumbers:!0},'package main\n\nimport (\n    "fmt"\n    "log"\n    raccoon "github.com/raystack/raccoon/clients/go"\n    "google.golang.org/protobuf/types/known/timestamppb"\n    "github.com/google/uuid"\n    "github.com/raystack/raccoon/clients/go/serializer"\n    "github.com/raystack/raccoon/clients/go/testdata"\n    "github.com/raystack/raccoon/clients/go/ws"\n)\n\nfunc main() {\n    client, err := ws.New(\n        ws.WithUrl("ws://localhost:8080/api/v1/events"),\n        ws.WithHeader("x-user-id", "123"),\n        ws.WithHeader("x-user-type", "ACME"),\n        ws.WithSerializer(serializer.JSON),\n    )\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer client.Close()\n    _, err = client.Send([]*raccoon.Event{\n        {\n            Type: "page",\n            Data: &testdata.PageEvent{\n                EventGuid: uuid.NewString(),\n                EventName: "clicked",\n                SentTime:  timestamppb.Now(),\n            },\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(<-client.EventAcks())\n}\n')),(0,r.yg)("h3",{id:"guide"},"Guide"),(0,r.yg)("h4",{id:"creating-a-client"},"Creating a client"),(0,r.yg)("p",null,"Raccoon's API is exposed over 3 different protocols.\nDepending on which protocol you wish to utilise to publish events to Raccoon, you will need to instantiate a different client."),(0,r.yg)("p",null,"Following is a table describing which client package you should use for a given protocol."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Protocol"),(0,r.yg)("th",{parentName:"tr",align:null},"Package"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Websocket"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"github.com/raystack/raccoon/clients/go/ws"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"REST"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"github.com/raystack/raccoon/clients/go/rest"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"gRPC"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"github.com/raystack/raccoon/clients/go/grpc"))))),(0,r.yg)("p",null,"For instance, you can create a client over REST API using:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go"},'import "github.com/raystack/raccoon/clients/go/rest"\n\nfunc main() {\n    client, err := rest.New(\n        rest.WithURL("http://localhost:8080/api/v1/events"),\n        rest.WithHeader("x-user-id", "123")\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    // use the client here\n}\n')),(0,r.yg)("p",null,"Depending on which protocol client you create, specifying the URL or the address of the server is mandatory."),(0,r.yg)("p",null,"For ",(0,r.yg)("inlineCode",{parentName:"p"},"REST")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"Websocket")," clients, this can be done via the ",(0,r.yg)("inlineCode",{parentName:"p"},"WithUrl")," option. For ",(0,r.yg)("inlineCode",{parentName:"p"},"gRPC")," server you must use the ",(0,r.yg)("inlineCode",{parentName:"p"},"WithAddr")," option."),(0,r.yg)("h4",{id:"sending-events"},"Sending events"),(0,r.yg)("p",null,"Event's can be sent using ",(0,r.yg)("inlineCode",{parentName:"p"},"client.Send(events []*raccoon.Event)"),". The return signature of the ",(0,r.yg)("inlineCode",{parentName:"p"},"Send")," method depends on the type of Client."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Signature"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"REST"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"gRPC")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"Send([]*raccoon.Event) (string, *raccoon.Response, error)"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"Websocket")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"Send([]*raccoon.Event) (string, error)"))))),(0,r.yg)("p",null,"For ",(0,r.yg)("inlineCode",{parentName:"p"},"gRPC")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"REST")," clients, the response is returned synchronously. For ",(0,r.yg)("inlineCode",{parentName:"p"},"Websocket")," the responses are returned asynchronously via a channel returned by ",(0,r.yg)("inlineCode",{parentName:"p"},"EventAcks()"),"."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Event")," struct has two fields: ",(0,r.yg)("inlineCode",{parentName:"p"},"Type")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"Data"),".\n",(0,r.yg)("inlineCode",{parentName:"p"},"Type")," denotes the event type. This is used by raccoon to route the event to a specific topic downstream. ",(0,r.yg)("inlineCode",{parentName:"p"},"Data")," field contains the payload. This data is serialised by the ",(0,r.yg)("inlineCode",{parentName:"p"},"serializer")," that's configured on the client. The serializer can be configured by using the ",(0,r.yg)("inlineCode",{parentName:"p"},"WithSerializer()")," option of the respective clients."),(0,r.yg)("p",null,"The following table lists which serializer to use for a given payload type."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Message Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Serializer"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"JSON"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"serializer.JSON"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Protobuf"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"serializer.PROTO"))))),(0,r.yg)("p",null,"Once a client is constructed with a specific kind of serializer, you may only pass it events of that specific type. In particular, for ",(0,r.yg)("inlineCode",{parentName:"p"},"JSON")," serialiser the event data must be a value that can be encoded by ",(0,r.yg)("a",{parentName:"p",href:"https://pkg.go.dev/encoding/json#Marshal"},(0,r.yg)("inlineCode",{parentName:"a"},"json.Marshal")),". While for ",(0,r.yg)("inlineCode",{parentName:"p"},"PROTOBUF")," serialiser the event data must be a protobuf message."),(0,r.yg)("h3",{id:"examples"},"Examples"),(0,r.yg)("p",null,"You can find examples of client usage over different protocols ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/raystack/raccoon/tree/main/clients/go/examples"},"here")))}d.isMDXComponent=!0}}]);