version: '3.9'

networks:
  cs-network:

services:
  localstack:
    image: localstack/localstack:3.5.0
    container_name: localstack-main
    ports:
      - "0.0.0.0:4566:4566"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
  pubsub-emulator:
    image: gcr.io/google.com/cloudsdktool/google-cloud-cli:480.0.0
    hostname: pubsub-emulator
    container_name: pubsub-emulator
    ports:
      - "8085:8085"
    command: ["gcloud", "beta", "emulators", "pubsub", "start", "--host-port=0.0.0.0:8085"]
  zookeeper:
    image: confluentinc/cp-zookeeper:5.1.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - cs-network

  kafka:
    image: confluentinc/cp-kafka:5.1.2
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 1000000000
      CONFLUENT_METRICS_ENABLE: 'false'
    links:
      - zookeeper
    networks:
      - cs-network
  cs:
    build:
      context: .
    command: [ "/bin/sh", "-c", "./raccoon", "server" ]
    hostname: cs
    container_name: cs
    stdin_open: true
    tty: true
    depends_on:
      - kafka
      # - telegraf
    environment:
      SERVER_WEBSOCKET_PORT: "8080"
      SERVER_WEBSOCKET_CHECK_ORIGIN: "true"
      SERVER_CORS_ENABLED: "true"
      SERVER_CORS_ALLOWED_ORIGIN: "http://localhost:3000 http://localhost:8080"
      SERVER_CORS_ALLOWED_METHODS: "GET HEAD POST OPTIONS"
      SERVER_CORS_PREFLIGHT_MAX_AGE_SECONDS: 60
      SERVER_WEBSOCKET_MAX_CONN: "30000"
      SERVER_WEBSOCKET_READ_BUFFER_SIZE: "10240"
      SERVER_WEBSOCKET_WRITE_BUFFER_SIZE: "10240"
      SERVER_WEBSOCKET_CONN_ID_HEADER: "X-User-ID"
      SERVER_WEBSOCKET_CONN_GROUP_HEADER: "X-User-Group"
      SERVER_WEBSOCKET_PING_INTERVAL_MS: 10000
      SERVER_WEBSOCKET_PONG_WAIT_INTERVAL_MS: 10000
      SERVER_WEBSOCKET_WRITE_WAIT_INTERVAL_MS: 1000
      SERVER_WEBSOCKET_PINGER_SIZE: 1
      SERVER_GRPC_PORT: 8081
      WORKER_BUFFER_CHANNEL_SIZE: 5
      WORKER_BUFFER_FLUSH_TIMEOUT_MS: 5000
      WORKER_POOL_SIZE: 5
      WORKER_KAFKA_DELIVERY_CHANNEL_SIZE: 100
      EVENT_DISTRIBUTION_PUBLISHER_PATTERN: "clickstream-%s-log"
      PUBLISHER_KAFKA_CLIENT_BOOTSTRAP_SERVERS: "kafka:9092"
      PUBLISHER_KAFKA_CLIENT_ACKS: "1"
      PUBLISHER_KAFKA_CLIENT_RETRIES: "2"
      PUBLISHER_KAFKA_CLIENT_RETRY_BACKOFF_MS: "100"
      PUBLISHER_KAFKA_CLIENT_STATISTICS_INTERVAL_MS: 5000
      PUBLISHER_KAFKA_CLIENT_QUEUE_BUFFERING_MAX_MESSAGES: 100000
      PUBLISHER_KAFKA_FLUSH_INTERVAL_MS: 1000
      METRIC_PROMETHEUS_ENABLED: "true"
      METRIC_STATSD_ADDRESS: "telegraf:8125"
      METRIC_STATSD_FLUSH_PERIOD_MS: 100
      LOG_LEVEL: "info"
    ports:
      - "8080:8080"
      - "8081:8081"
    networks:
      - cs-network
  # telegraf:
  #   image: telegraf
  #   volumes:
  #     - ./.telegraf.sample.conf:/etc/telegraf/telegraf.conf:ro
  #   ports:
  #     - "8125:8125"
  #   networks:
  #     - cs-network
