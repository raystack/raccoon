"use strict";(self.webpackChunkfirehose=self.webpackChunkfirehose||[]).push([[641],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=u(n),d=o,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(f,a(a({ref:t},s),{},{components:n})):r.createElement(f,a({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5506:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return p}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],c={},l="Development Guide",u={unversionedId:"contribute/development",id:"contribute/development",title:"Development Guide",description:"This guide is targeted at developers looking to contribute to Raccoon.",source:"@site/docs/contribute/development.md",sourceDirName:"contribute",slug:"/contribute/development",permalink:"/raccoon/contribute/development",draft:!1,editUrl:"https://github.com/raystack/raccoon/edit/master/docs/docs/contribute/development.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Contribution Process",permalink:"/raccoon/contribute/contribution"},next:{title:"Release Process",permalink:"/raccoon/contribute/release"}},s={},p=[{value:"Making a Pull Request",id:"making-a-pull-request",level:2},{value:"Incorporating upstream changes from main",id:"incorporating-upstream-changes-from-main",level:3},{value:"Signing commits",id:"signing-commits",level:3},{value:"Good practices to keep in mind",id:"good-practices-to-keep-in-mind",level:3}],m={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"development-guide"},"Development Guide"),(0,i.kt)("p",null,"This guide is targeted at developers looking to contribute to Raccoon."),(0,i.kt)("h2",{id:"making-a-pull-request"},"Making a Pull Request"),(0,i.kt)("h3",{id:"incorporating-upstream-changes-from-main"},"Incorporating upstream changes from main"),(0,i.kt)("p",null,"Our preference is the use of ",(0,i.kt)("inlineCode",{parentName:"p"},"git rebase")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"git merge")," : ",(0,i.kt)("inlineCode",{parentName:"p"},"git pull -r")),(0,i.kt)("h3",{id:"signing-commits"},"Signing commits"),(0,i.kt)("p",null,"Commits have to be signed before they are allowed to be merged into the codebase:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Include -s flag to signoff\ngit commit -s -m "My first commit"\n')),(0,i.kt)("h3",{id:"good-practices-to-keep-in-mind"},"Good practices to keep in mind"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Follow ",(0,i.kt)("a",{parentName:"li",href:"https://www.conventionalcommits.org/en/v1.0.0/#summary"},"conventional commits")," while composing our commit messages."),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"WIP:")," to PR name if more work needs to be done prior to review"),(0,i.kt)("li",{parentName:"ul"},"Avoid ",(0,i.kt)("inlineCode",{parentName:"li"},"force-pushing")," as it makes reviewing difficult")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Managing CI-test failures")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"GitHub runner tests",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Click ",(0,i.kt)("inlineCode",{parentName:"li"},"checks")," tab to analyse failed tests")))))}d.isMDXComponent=!0}}]);