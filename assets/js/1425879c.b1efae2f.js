"use strict";(self.webpackChunkfirehose=self.webpackChunkfirehose||[]).push([[285],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3331:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={},l="Publishing Events",c={unversionedId:"guides/publishing",id:"guides/publishing",title:"Publishing Events",description:"EndPoints",source:"@site/docs/guides/publishing.md",sourceDirName:"guides",slug:"/guides/publishing",permalink:"/raccoon/guides/publishing",draft:!1,editUrl:"https://github.com/raystack/raccoon/edit/master/docs/docs/guides/publishing.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Overview",permalink:"/raccoon/guides/overview"},next:{title:"Deployment",permalink:"/raccoon/guides/deployment"}},p={},u=[{value:"EndPoints",id:"endpoints",level:2},{value:"Authorization/Authentication",id:"authorizationauthentication",level:3},{value:"HTTP backend",id:"http-backend",level:3},{value:"gRPC backend",id:"grpc-backend",level:3},{value:"Data Formatters",id:"data-formatters",level:2},{value:"Protos",id:"protos",level:3},{value:"JSON",id:"json",level:3},{value:"Headers",id:"headers",level:2},{value:"gRPC",id:"grpc",level:2},{value:"Topics",id:"topics",level:2}],d={toc:u};function h(e){var t=e.components,s=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"publishing-events"},"Publishing Events"),(0,o.kt)("h2",{id:"endpoints"},"EndPoints"),(0,o.kt)("p",null,"Raccoon can be hosted behind a proxy/API GW, a sample of blocks as below."),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(7447).Z,width:"513",height:"161"})),(0,o.kt)("p",null,"The HTTP API path which accepts events is:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"/api/v1/events")),(0,o.kt)("p",null,"This path can be used for sending events by either connecting via websocket connection or as a normal REST API Request."),(0,o.kt)("p",null,"HTTP methods used for Endpoints are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Websocket")," - GET"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"REST")," - POST")),(0,o.kt)("h3",{id:"authorizationauthentication"},"Authorization/Authentication"),(0,o.kt)("p",null,"Raccoon does not provide features to perform any authorization or authentication of the user/client initiating the connection. It accepts connections as trusted ","(","and assumes any such auth is already performed",")"),(0,o.kt)("h3",{id:"http-backend"},"HTTP backend"),(0,o.kt)("p",null,"SSL termination is outside the scope of Raccoon, and the service API accepts HTTP connections assuming that the SSL is terminated at a proxy or ELB before reaching Raccoon."),(0,o.kt)("h3",{id:"grpc-backend"},"gRPC backend"),(0,o.kt)("p",null,"Similar to HTTP SSL termination is outside the scope of Raccoon, and the service API accepts connections assuming SSL is terminated at a proxy or ELB before reaching Raccoon."),(0,o.kt)("h2",{id:"data-formatters"},"Data Formatters"),(0,o.kt)("p",null,"Raccoon supports Protos and JSON as the primary data formatters. Protobufs can be used to send event via websockets, REST or gRPC whereas JSON is supported only for websocket and REST endpoint."),(0,o.kt)("p",null,"With a websocket connection the content type is identified based on the mesage type. If the message type is binary it is assumed that the formatting is protobufs and if the message type is text then formatting is assumed to be JSON."),(0,o.kt)("h3",{id:"protos"},"Protos"),(0,o.kt)("p",null,"Raccoon accepts an SendEventRequest proto that wraps multiple Event proto. This enables clients to send an event in real-time or multiple events in batches."),(0,o.kt)("p",null,"Refer to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/raystack/proton/blob/main/raystack/raccoon/v1beta1/raccoon.proto"},"raccoon.proto")," for how you can build the request."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"message SendEventRequest {\n  string req_guid = 1;\n  google.protobuf.Timestamp sent_time = 2;\n  repeated Event events = 3;\n}\n")),(0,o.kt)("p",null,"Where ",(0,o.kt)("strong",{parentName:"p"},"req_guid")," - A globally unique ID generated by the client denoting this request as unique ",(0,o.kt)("strong",{parentName:"p"},"sent_time")," - This is when the event is sent over the WebSocket in protobuf timestamp format. This time is used to calculate latencies in Raccoon. ",(0,o.kt)("strong",{parentName:"p"},"events")," - are events of type Event proto which is of the format"),(0,o.kt)("p",null,"Refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/raystack/proton/blob/main/raystack/raccoon/v1beta1/raccoon.proto"},"Event.proto")," for how the event could be composed of."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"message Event {\n  // Data/byteArray of the serialised product proto.\n  bytes eventBytes = 1;\n  /* This is the protoMessageName which the protoc provides with each compiled proto. This type is used by raccoon to distribute events to respective Kafka topics.\n  */\n  string type = 2;\n }\n")),(0,o.kt)("p",null,"Where ",(0,o.kt)("strong",{parentName:"p"},"eventBytes")," - is a byte array serialized by the event proto ","(","eg. ViewedEvent.proto",")"," serializer client ",(0,o.kt)("strong",{parentName:"p"},"type")," - event type which Raccoon uses to distribute the events to Kafka topics. More details in the following sections."),(0,o.kt)("p",null,"Clients build the event array and compose the SendEventRequest proto, send them through the WebSocket client."),(0,o.kt)("p",null,"Raccoon also wires response every time a message is read and processed."),(0,o.kt)("p",null,"Refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/raystack/proton/blob/main/raystack/raccoon/v1beta1/raccoon.proto"},"raccoon.proto")," that Raccoon sends for every event."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"message SendEventResponse {\n  Status status = 1;\n  Code code = 2;\n      /* time when the response is generated */\n  int64 sent_time = 3;\n      /* failure reasons if any */\n  string reason = 4;\n      /* Usually detailing the success/failures */\n  map<string, string> data = 5;\n}\n\nenum Status {\n    UNKNOWN_STATUS = 0;\n      /* signifies request success */\n    SUCCESS = 1;\n      /* server request failures */\n    ERROR = 2;\n}\n\nenum Code {\n    UNKNOWN_CODE = 0;\n          /* successfully read and deserialized */\n    OK = 1;\n          /* usually deserialization failures */\n    BAD_REQUEST = 2;\n          /* server runtime errors */\n    INTERNAL_ERROR = 3;\n          /* signifies max connection reached at the server */\n    MAX_CONNECTION_LIMIT_REACHED = 4;\n          /* signifies a user reached max connections allowed.Defaults to 1 */\n    MAX_USER_LIMIT_REACHED = 5;\n}\n")),(0,o.kt)("p",null,"The above response model is self-explanatory. Clients can choose to retry for error codes such as Code=","[","3","|","4","]"),(0,o.kt)("h3",{id:"json"},"JSON"),(0,o.kt)("p",null,"Sample JSON SendEventRequest"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "req_guid": "1234abcd",\n  "sent_time": {\n    "seconds": 1638154927,\n    "nanos": 376499000\n  },\n  "events": [\n    {\n      "eventBytes": "Cg4KCHNlcnZpY2UxEgJBMRACIAEyiQEKJDczZTU3ZDlhLTAzMjQtNDI3Yy1hYTc5LWE4MzJjMWZkY2U5ZiISCcix9QzhsChAEekGEi1cMlNAKgwKAmlkEgJpZBjazUsyFwoDaU9zEgQxMi4zGgVBcHBsZSIDaTEwOiYKJDczZTU3ZDlhLTAzMjQtNDI3Yy1hYTc5LWE4MzJjMWZkY2U5Zg==",\n      "type": "booking"\n    }\n  ]\n}\n')),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"req_guid"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"A globally unique Identifier generated by the client.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"sent_time"),(0,o.kt)("td",{parentName:"tr",align:null},"Object"),(0,o.kt)("td",{parentName:"tr",align:null},"Unix time in seconds+nanoseconds when the event is sent to Raccoon")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"events"),(0,o.kt)("td",{parentName:"tr",align:null},"Array(Object)"),(0,o.kt)("td",{parentName:"tr",align:null},"Array of event objects")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"events.eventBytes"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"base64 string of bytes generated by json serializion of EventProto")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"events.type"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"Event type which Raccoon uses to distribute the events to Kafka topics")))),(0,o.kt)("p",null,"Sample JSON SendEventResponse"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "status": 1,\n  "code": 1,\n  "sent_time": 1638155915,\n  "data": {\n    "req_guid": "1234abcd"\n  }\n}\n')),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"status"),(0,o.kt)("td",{parentName:"tr",align:null},"int"),(0,o.kt)("td",{parentName:"tr",align:null},"status of the send event request")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"code"),(0,o.kt)("td",{parentName:"tr",align:null},"int"),(0,o.kt)("td",{parentName:"tr",align:null},"response code")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"sent_time"),(0,o.kt)("td",{parentName:"tr",align:null},"int"),(0,o.kt)("td",{parentName:"tr",align:null},"sent time in seconds")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"data"),(0,o.kt)("td",{parentName:"tr",align:null},"int"),(0,o.kt)("td",{parentName:"tr",align:null},"data map sent by the server, currently contains just the req_guid")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"reason"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"reason for any failure if any")))),(0,o.kt)("p",null,"Values of status and codes is same as defined in Protos."),(0,o.kt)("h2",{id:"headers"},"Headers"),(0,o.kt)("p",null,"Raccoon service accepts headers to identify a user connection uniquely. The header name is made configurable as it enables clients to specify a header name that works for them. For, e.g. for a mobile app having a request header as ",(0,o.kt)("inlineCode",{parentName:"p"},"X-User-ID")," which identifies the user ","(","client",")"," connecting to Raccoon, can configure Raccoon service with the config set as below ",(0,o.kt)("inlineCode",{parentName:"p"},"SERVER_WEBSOCKET_CONN_ID_HEADER=X-User-ID"),". Optionally, ",(0,o.kt)("inlineCode",{parentName:"p"},"SERVER_WEBSOCKET_CONN_GROUP_HEADER")," can also be configured to ",(0,o.kt)("a",{parentName:"p",href:"https://raystack.gitbook.io/raccoon/concepts/architecture#connections"},"support multitenancy")," such as multiple apps connecting to a single Raccoon instance."),(0,o.kt)("p",null,"Raccoon uses the config to fetch the header name and uses the value passed in the request header with this name, as the connection id. This header name uniquely identifies a client. A client, in this case, can be the user in the app."),(0,o.kt)("p",null,"The following header is a sample providing a user id: 654785432. Once the client initiates a WebSocket upgrade request over Raccoon, assuming the request is upgraded, and the client connection is established, Racoon accepts the header and extracts the user id to build a connection map. This map helps deduplicate connections for a user within the same raccoon instance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},'{\n    "X-User-ID": "654785432"\n}\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Content-Type")," header is mandatory for sending event using REST API."),(0,o.kt)("p",null,"Following are the supported ",(0,o.kt)("inlineCode",{parentName:"p"},"Content-Type")," headers for various data formats:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Protobufs - ",(0,o.kt)("inlineCode",{parentName:"li"},"application/proto")),(0,o.kt)("li",{parentName:"ul"},"JSON - ",(0,o.kt)("inlineCode",{parentName:"li"},"application/json"))),(0,o.kt)("h2",{id:"grpc"},"gRPC"),(0,o.kt)("p",null,"Events can be sent to Raccoon using gRPC too."),(0,o.kt)("p",null,"Refer to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/raystack/proton/blob/main/raystack/raccoon/EventService.proto"},"EventService.proto")," for the definition of ",(0,o.kt)("inlineCode",{parentName:"p"},"EventService")," which exposes one RPC call ",(0,o.kt)("inlineCode",{parentName:"p"},"SendEvent"),". It is recommended to generate the language specific gRPC client using the proto definition."),(0,o.kt)("p",null,"Input to the RPC call is ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/raystack/proton/blob/main/raystack/raccoon/v1beta1/raccoon.proto"},"SendEventRequest")," and the output is ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/raystack/proton/blob/main/raystack/raccoon/v1beta1/raccoon.proto"},"raccoon.proto"),"."),(0,o.kt)("p",null,"To support multi-tenacy while using gRPC, ",(0,o.kt)("inlineCode",{parentName:"p"},"SERVER_WEBSOCKET_CONN_ID_HEADER")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"SERVER_WEBSOCKET_CONN_GROUP_HEADER")," values can be used. The key along with their values if set in grpc metadata while sending the request. Golang client example -"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'md := metadata.New(map[string]string{"X-User-ID": "1234"})\nctx := metadata.NewOutgoingContext(context.Background(), md)\nr, err := client.SendEvent(ctx, req)\n')),(0,o.kt)("h2",{id:"topics"},"Topics"),(0,o.kt)("p",null,"Raccoon distributes events to a topic based on the event type. The protobufs section above clarifies how the type should be set in the event. The type is a string literal. For example, ViewedEvent - which signifies that the user viewed something on the app or the site can have its event type set as below ",(0,o.kt)("inlineCode",{parentName:"p"},"type = viewedevent")),(0,o.kt)("p",null,"When raccoon API consumes a batch array of events ","(","events in SendEventRequest proto",")",", it deserializes them and fetches the individual events ","(","using the SendEventRequest proto",")",", and constructs the topic to send each event to based on the ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," field set in each of the events."),(0,o.kt)("p",null,"The following code determines the topic name."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"topic := fmt.Sprintf(pr.topicFormat, event.Type)\n")),(0,o.kt)("p",null,"where ",(0,o.kt)("strong",{parentName:"p"},"topicformat")," - is the configured pattern ",(0,o.kt)("inlineCode",{parentName:"p"},"EVENT_DISTRIBUTION_PUBLISHER_PATTERN")," ",(0,o.kt)("strong",{parentName:"p"},"type")," - is the type set by the client when the event proto is generated"),(0,o.kt)("p",null,"For e.g. setting the"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"EVENT_DISTRIBUTION_PUBLISHER_PATTERN=topic-%s-log\n")),(0,o.kt)("p",null,"and a type such as ",(0,o.kt)("inlineCode",{parentName:"p"},"type=viewedevent")," in the event"),(0,o.kt)("p",null,"will have the topic name as ",(0,o.kt)("inlineCode",{parentName:"p"},"topic-viewedevent-log")))}h.isMDXComponent=!0},7447:function(e,t,n){t.Z=n.p+"assets/images/raccoon_ep-2f003a95743c872cbd23fe5f2cf5fb1e.png"}}]);