"use strict";(self.webpackChunkraccoon=self.webpackChunkraccoon||[]).push([[593],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>d});var r=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),g=i,d=u["".concat(s,".").concat(g)]||u[g]||y[g]||a;return n?r.createElement(d,o(o({ref:t},c),{},{components:n})):r.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},4671:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>y,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(8168),i=(n(6540),n(5680));const a={},o="Python",l={unversionedId:"clients/python",id:"clients/python",title:"Python",description:"Requirements",source:"@site/docs/clients/python.md",sourceDirName:"clients",slug:"/clients/python",permalink:"/raccoon/clients/python",draft:!1,editUrl:"https://github.com/raystack/raccoon/edit/master/docs/docs/clients/python.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Golang",permalink:"/raccoon/clients/golang"},next:{title:"Javascript",permalink:"/raccoon/clients/javascript"}},s={},p=[{value:"Requirements",id:"requirements",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Quickstart",id:"quickstart",level:3},{value:"Guide",id:"guide",level:3},{value:"Creating a client",id:"creating-a-client",level:4},{value:"Publishing events",id:"publishing-events",level:4},{value:"Examples",id:"examples",level:3}],c={toc:p},u="wrapper";function y(e){let{components:t,...n}=e;return(0,i.yg)(u,(0,r.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"python"},"Python"),(0,i.yg)("h2",{id:"requirements"},"Requirements"),(0,i.yg)("p",null,"Make sure that Python version ",(0,i.yg)("inlineCode",{parentName:"p"},">=3.9")," is installed on your system. See ",(0,i.yg)("a",{parentName:"p",href:"https://docs.python.org/3.9/using/unix.html#getting-and-installing-the-latest-version-of-python"},"installation instructions")," on Python's website for more information."),(0,i.yg)("h2",{id:"installation"},"Installation"),(0,i.yg)("p",null,"Install Raccoon's Python client using ",(0,i.yg)("a",{parentName:"p",href:"https://docs.python.org/3/installing/index.html"},"pip")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"$ pip install raccoon_client\n")),(0,i.yg)("p",null,"Or if you prefer using ",(0,i.yg)("a",{parentName:"p",href:"https://python-poetry.org/docs/"},"poetry")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"$ poetry add raccoon_client\n")),(0,i.yg)("h2",{id:"usage"},"Usage"),(0,i.yg)("h3",{id:"quickstart"},"Quickstart"),(0,i.yg)("p",null,"Below is a self contained example of Raccoon's Python client that uses the REST API to publish events"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python",metastring:'title="quickstart.py" showLineNumbers',title:'"quickstart.py"',showLineNumbers:!0},'from raccoon_client.client import Event\nfrom raccoon_client.protos.raystack.raccoon.v1beta1.raccoon_pb2 import SendEventRequest\nfrom raccoon_client.rest.client import RestClient\nfrom raccoon_client.rest.option import RestClientConfigBuilder\nfrom raccoon_client.serde.enum import Serialiser, WireType\n\ndef run():\n    config = (\n        RestClientConfigBuilder()\n        .with_url("http://localhost:8080/api/v1/events")\n        .with_serialiser(Serialiser.JSON)\n        .with_wire_type(WireType.JSON)\n        .build()\n    )  \n    client = RestClient(config)\n    data = [\n        {\n            "a": "field a",\n            "b": "field b",\n        }\n    ]\n    topic = "test_topic_2"\n    events = [Event(topic, event)]\n    req_id, response, raw = client.send(events)\n    print(req_id, response, raw)\n\nif __name__ == "__main__":\n    run()\n')),(0,i.yg)("h3",{id:"guide"},"Guide"),(0,i.yg)("h4",{id:"creating-a-client"},"Creating a client"),(0,i.yg)("p",null,"Raccoon's Python client only supports sending events over Raccoon's HTTP/JSON (REST) API."),(0,i.yg)("p",null,"To create a client, you must pass the ",(0,i.yg)("inlineCode",{parentName:"p"},"RestClientConfig")," object to the client constructor ",(0,i.yg)("inlineCode",{parentName:"p"},"RestClient"),"."),(0,i.yg)("p",null,"To build the client config, use ",(0,i.yg)("inlineCode",{parentName:"p"},"RestClientConfigBuilder"),". ",(0,i.yg)("inlineCode",{parentName:"p"},"RestClientConfigBuilder")," uses a ",(0,i.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Builder_pattern"},"builder pattern")," along with a ",(0,i.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Fluent_interface"},"fluent interface API")," to help build the config object. Here's a minimal example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'from raccoon_client.rest.client import RestClient\nfrom raccoon_client.rest.option import RestClientConfigBuilder\nfrom raccoon_client.serde.enum import Serialiser, WireType\n\nconfig = (\n    RestClientConfigBuilder()\n        .with_url("http://localhost:8080/api/v1/events")\n        .with_serializer(Serializer.JSON)\n        .with_wire_type(WireType.JSON)\n        .build()\n)\nclient = RestClient(config)\n\n# use client here\n')),(0,i.yg)("h4",{id:"publishing-events"},"Publishing events"),(0,i.yg)("p",null,"To publish events, create a list of ",(0,i.yg)("inlineCode",{parentName:"p"},"raccoon_client.client.Event")," and pass it to ",(0,i.yg)("inlineCode",{parentName:"p"},"RestClient.send()")," method. Each event has a ",(0,i.yg)("inlineCode",{parentName:"p"},"type")," property and an ",(0,i.yg)("inlineCode",{parentName:"p"},"event")," property."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"type")," denotes the event type. This is used by raccoon to route the event to a specific topic downstream. ",(0,i.yg)("inlineCode",{parentName:"p"},"event")," field contains the payload or raw event data. This data is serialised by the ",(0,i.yg)("inlineCode",{parentName:"p"},"serializer")," that's configured on the client. "),(0,i.yg)("p",null,"The following table lists which serializer to use for a given payload type."),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Message Type"),(0,i.yg)("th",{parentName:"tr",align:null},"Serializer"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"JSON"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"raccoon_client.serde.enum.Serialiser.JSON"))),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Protobuf"),(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"raccoon_client.serde.emum.Serialiser.PROTOBUF"))))),(0,i.yg)("p",null,"Once a client is constructed with a specific kind of serializer, you may only pass it events of that specific type. In particular, for ",(0,i.yg)("inlineCode",{parentName:"p"},"JSON")," serialiser the event data must be a python dict. While for ",(0,i.yg)("inlineCode",{parentName:"p"},"PROTOBUF")," serialiser the event data must be a protobuf message."),(0,i.yg)("h3",{id:"examples"},"Examples"),(0,i.yg)("p",null,"You can find examples for Raccoon's python client ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/raystack/raccoon/blob/main/clients/python/examples/rest.py"},"here")))}y.isMDXComponent=!0}}]);